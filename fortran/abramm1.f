c
c
c
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c        this is the end of the debugging code and the beginning of the
c        Abramowitz function code proper.
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
        subroutine abramm1(z,jm1,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,jm1,jm1u,com,zu,ima
        real *8 rea(2)
        equivalence (rea(1),com)
        data ima/(0.0d0,1.0d0)/,
     $     pi/3.141592653589793238462643383279502884197d0/
c
c        this subroutine evaluates the Abramowitz functions J_{-1}
c        for a user-specified complex number z with Re(z)>=0.
c        
c        The code is reasonably accurate (almost 15-digit relative 
c        accuracy when ifexpon=0) 
c        and reasonably fast (O(1) cost for any z).
c
c        When ifexpon=1, that is, the Abramowitz function is evaluated
c        honestly. The subroutine will lose accuracy gradually
c        simply due to the ill-conditioning of evaluating the 
c        exponential factor exp(-nu) with nu=3(z/2)**(2/3).
c        The condition number of evaluating exp(-nu) is abs(nu). 
c        Thus, the subroutine will lose an extra log_{10}abs(nu) 
c        digits if the function is evaluated honestly.
c        
c        
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c        J_{-1} is to be evaluated
c
c  ifexpon - the integer parameter telling the subroutine whether
c        to calculate the actual values of the Abramowitz function,
c        or the values of the Abramowitz function scaled by e^{nu}.
c        Permitted values: 0 and 1. 
c    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz 
c        function honestly
c    ifexpon = 0 will cause the subroutine to scale the Abramowitz 
c        function by e^{nu}, where nu=3(z/2)^(2/3).
c                
c                      output parameters:
c
c  jm1 - the said Abramowitz function
c        
c       
c        . . . if z in the upper half-plane - act accordingly
c
        com=z 
        if(rea(2) .lt. 0) goto 1400
        call abramm1ur(z,ier,jm1,ifexpon)
        return
 1400 continue
c
c       z is in the right lower quadrant. compute 
c       jm1 at the points zu obtained from z by reflection
c       in the x axis.
c
        zu=dconjg(z)
c
        call abramm1ur(zu,ier,jm1u,ifexpon)
        jm1=dconjg(jm1u)

        return
        end
c
c
c
c
c
        subroutine abramm1p(p,m,z,f)
        implicit real *8 (a-h,o-z)
        complex *16 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abramm1pr(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abramm1pc(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1)
        complex *16 z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abramm1asym(z,jm1,ifexpon)
c
c        evaluate the asymptotic expansion for J_{-1} at
c        the user-supplied point z.
c
        implicit real *8 (a-h,o-z)
        dimension c(51),d(51)
        complex *16 z,jm1,nu,pp,cd
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
        data c/
     1     +1.0000000000000000000000000000000000000000000000000D0,
     2     -8.3333333333333333333333333333333333333333333333333D-2,
     3     +3.4722222222222222222222222222222222222222222222222D-3,
     4     +5.5459104938271604938271604938271604938271604938272D-2,
     5     -1.7476650913065843621399176954732510288065843621399D-1,
     6     +4.7552079984353566529492455418381344307270233196159D-1,
     7     -1.2045345181391163218259411675049535131839658588630D0,
     8     +2.4467120737235599287773713356703754508967128994564D0,
     9     -1.8860996970698505165102552541109925654964520991041D-1,
     *     -4.4365225236052470241629998844925087325466671433580D1,
     1     +4.0419909410521589275394577099835080208548288730284D2,
     2     -2.7103991962168623863518911975426052104961722868508D3,
     3     +1.4978896666659197068846295333206644541667066910083D4,
     4     -6.0359347335059701788507406369202238422822048114820D4,
     5     +4.8799291299849646159738020901711381802341646884323D3,
     6     +3.5984842320676985736692140754328057655621598164223D6,
     7     -5.4338007286250610805278902251287792947592777870626D7,
     8     +5.8149586710940319941765522303974949108775203346423D8,
     9     -4.9569476901284883261850490384039655713268499402505D9,
     *     +2.9885762986868794353261846431570654672058291341440D10,
     1     -2.4489051141273361428359954287215775680363143510369D9,
     2     -3.7390326384256359481805570790262413030148524725927D12,
     3     +7.8876899200760638173846779492975338662266954310062D13,
     4     -1.1594549559126533900778874672503270572559224000835D15,
     5     +1.3361013131126255882003649261023664219910805281543D16,
     6     -1.0727251872321295046418980983244031436873131429260D17,
     7     +8.8407462695403105166182619686013775587213214453163D15,
     8     +2.3021431743994440605389348512399133800125515048301D19,
     9     -6.2371664460968286939122207914688028725085520061772D20,
     *     +1.1662539086147836954338156790333719501849348052895D22,
     1     -1.6937474791212160100189521942618873255685607393352D23,
     2     +1.6985895325857256860284078134784689217822732350432D24,
     3     -1.4041250531489848351699857277611393439582403066980D23,
     4     -5.5731493315561839570033294765953972746888516051913D26,
     5     +1.8442195665021781532505392120624978424128673549990D28,
     6     -4.1859633468912161386964689000742079188978022612486D29,
     7     +7.3348995570188302217074917497582661856097422857868D30,
     8     -8.8227560499403389729435420352188696252399981986876D31,
     9     +7.3065750241364854134941958178321332201773326933178D30,
     *     +4.1079003520838357326529703134917202459507248261582D34,
     1     -1.6057767755132064508138059497269625332477759394305D36,
     2     +4.2869829713332878958123512050224798646968097706319D37,
     3     -8.7978962542074156283823091547467106042216687634871D38,
     4     +1.2342014545062544876482412842985667565376364402821D40,
     5     -1.0233301598320806709461658533932802342111813916712D39,
     6     -7.7396972522097370904295192213752880915924531784730D42,
     7     +3.4897588072311495465418416240130620911062811725617D44,
     8     -1.0712473186029117650262422350900847239558196060244D46,
     9     +2.5198047175590917099125120992484646179142978785389D47,
     *     -4.0388186405081799291509620340164357373290518867940D48,
     1     +3.3515652002254767355550508828868193905551804627724D47/


c
        m=18
        nu=3*((z/2)**toth)

cccc        do i=1,51
cccc           d(i)=c(i)/abs(nu)**i
cccc        enddo
cccc        call prin2('d=*',d,51)
        
        pp=c(m+1)
        cd=1/nu
c
        do 1800 i=m,1,-1
        pp=pp*cd+c(i)
 1800 continue
c 
        jm1=dc*sqrt(3/nu)*pp
        if (ifexpon .eq. 1) jm1=jm1*exp(-nu)      
      
c
        return
        end
c
c
c
c
c
        subroutine abramm1series(z,jm1,ifexpon)
        implicit real *8 (a-h,o-z)
        dimension a(25),b(50)
        complex *16 z,jm1,lnz,z2,c1,c2,nu
c
c
c        this subroutine evaluates the Abramowitz functions J_{-1}
c        for a user-specified complex number z in the local regime,
c        i. e. for cdabs(z) < 1, using the series expansion 
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_{-1} is to be evaluated
c
c                      output parameters:
c
c  jm1 - the said Abramowitz functions
c        
        data a/
     1     -2.0000000000000000000000000000000000000000000000000D0,
     3     +1.0000000000000000000000000000000000000000000000000D0,
     5     -4.1666666666666666666666666666666666666666666666667D-2,
     7     +4.6296296296296296296296296296296296296296296296296D-4,
     9     -2.0667989417989417989417989417989417989417989417989D-6,
     1     +4.5928865373309817754262198706643151087595532039976D-9,
     3     -5.7990991632966941608916917558892867534842843484819D-12,
     5     +4.5518831737022717118459118963024228834256549046169D-15,
     7     -2.3707724863032665165864124459908452517841952628213D-18,
     9     +8.6084694491767121154190720624213698321866204169255D-22,
     1     -2.2653866971517663461629137006372025874175316886646D-25,
     3     +4.4576676449267342506157294384832793927932540115400D-29,
     5     -6.7295707199980891464609442006088155084439221188707D-33,
     7     +7.9639890177492179248058511249808467555549374187819D-37,
     9     -7.5245550054319897248732531415162951205167587101114D-41,
     1     +5.7659425328980764175273970433075058394764434560241D-45,
     3     -3.6327762934085662912849023710354749492669124596926D-49,
     5     +1.9045697249704132805310382568079453440636009540173D-53,
     7     -8.3975737432557904785319147125570782366119971517517D-58,
     9     +3.1435104227205923779785560801666086084495010675121D-62,
     1     -1.0075353918976257621726141282585284001440708549718D-66,
     3     +2.7861716495150316967330737466360499976330702255733D-71,
     5     -6.6936662730997301958799580689891648991761248932666D-76,
     7     +1.4059370453895673589329884622955607853762077070503D-80,
     9     -2.5966626872591004708425466576085268642438824376668D-85/




        data b/
     1     -1.7316469947045985818195362702472072931264780078198D0,
     2     +3.5449077018110320545963349666822903655950989122448D0,
     3     -1.1341765026477007090902318648763963534367609960901D0,
     4     -3.9387863353455911717737055185358781839945543469386D-1,
     5     +8.1979576499209751767648549925405403615420597059310D-2,
     6     +7.8775726706911823435474110370717563679891086938773D-3,
     7     -1.1577977635714663776652308016403069537515868809059D-3,
     8     -5.3588929732593077166989190728379295020334072747464D-5,
     9     +5.9806967430793448927326299487438117502610053026081D-6,
     *     +1.6539793127343542335490490965549165129732738502304D-7,
     1     -1.4719335240679294091760668290304035256638539447040D-8,
     2     -2.7338501036931474934695026389337463024351633888106D-10,
     3     +2.0078726603525024874472946222860416356501683654204D-11,
     4     +2.6961046387506385537174582238005387597979915077027D-13,
     5     -1.6760795833721868880525746902531471557190633459574D-14,
     6     -1.7118124690480244785507671262225642919352327033033D-16,
     7     +9.1839792232715994576195555638833867759620923522355D-18,
     8     +7.4040331706229432463268474317584960723842244952565D-20,
     9     -3.4810659380875343444521307684839168061395883034668D-21,
     *     -2.2788652418045377797250992403073241220019158187924D-23,
     1     +9.5064693855850968224462625345286172531836977405509D-25,
     2     +5.1674948793753691150229007716719367845848431265134D-27,
     3     -1.9323670184549269802616312253045730268469781233694D-28,
     4     -8.8803830200642191356296627799827062804345130203014D-31,
     5     +3.0025594995514959678319794030641411188374200923429D-32,
     6     +1.1840510693418958847506217039976941707246017360402D-34,
     7     -3.6464422615939150780225576475490554849494708568526D-36,
     8     -1.2493943962666412205873395631504634069057737005806D-38,
     9     +3.5268557757523377929555013167173682472911973231715D-40,
     *     +1.0611469307513514698380665560985760208134650081370D-42,
     1     -2.7608936530165459016604313852023197887910240435180D-44,
     2     -7.3614077748966456457722272362024004218762747702882D-47,
     3     +1.7738978127957476932216206633459509400378014156450D-48,
     4     +4.2248667211298471337076602595284667251356030591645D-51,
     5     -9.4698306496814759305371097499826256206715037845408D-53,
     6     -2.0287475251523875792113614691613285594888850224079D-55,
     7     +4.2460565946661359845094791369921581452495858422382D-57,
     8     +8.2328850140101760377053870187538696513630590958847D-60,
     9     -1.6144907151537134799404292918986687042140417851894D-61,
     *     -2.8488477158414395092236364644983804461618253558548D-64,
     1     +5.2508607384695431023323813632229806873635956966881D-66,
     2     +8.4736695890584161487913041775680560564004323493598D-69,
     3     -1.4721012798581147413625658435886796718383830665787D-70,
     4     -2.1823043573253022608852414889819609200341065567900D-73,
     5     +3.5826570377647029831894640680040089454401950407781D-75,
     6     +4.8985507459602744352081739371087787206152784664197D-78,
     7     -7.6173802741955233148012769315366815517890418354435D-80,
     8     -9.6414878775764647296793235914515297510486320121631D-83,
     9     +1.4232185539630085436701372121801086265001613011449D-84,
     *     +1.6731722680786590187559564749846469788714133021247D-87/
c
c        evaluate jm1
c
        m=18
        c1=b(m)
        do k=m-1,1,-1
           c1=c1*z+b(k)
        enddo

        m2=9
        c2=a(m2)
        z2=z**2
        do k=m2-1,1,-1
           c2=c2*z2+a(k)
        enddo

        jm1=(c1+c2*log(z))/2
        if (ifexpon .eq. 1) return

        nu=3*(z/2)**(2.0d0/3)
        jm1=jm1*exp(nu)        
        
c
        return
        end
c
c
c
c
c
        subroutine abramm1ur(z,ier,jm1,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,com,ima,cd,jm1,nu
        dimension rea(2)
        equivalence (rea(1),com)
        real *8 cm1p0(64)
        real *8 cm1p1(60)
        real *8 cm1p2(40)
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
c        this subroutine evaluates the Abramowitz functions J_{-1}
c        for a user-specified complex number z in the upper right quadrant.
c        it is reasonably accurate and reasonably fast.
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_{-1} is to be evaluated
c
c                      output parameters:
c
c  ier - error return code. 
c         ier=0 means successful conclusion
c         ier=4 means that z is not in the upper right quadrant
c  jm1 - the said Abramowitz function
c        


c  rsmall=0.99902E+00, rlarge=0.30010E+01, iback= 11, m=  32 relerr=0.7544E-21
        data cm1p0/
     1     0.5084046320826067815191285685396061D-17,
     2     -.1746081529946374994787731116628659D-15,
     3     -.7459122350264262066030114420063653D-14,
     4     0.1246260020029645301216316767122146D-13,
     5     0.5103424485632482420688362817496101D-12,
     6     -.2942984714696821766871732423632844D-12,
     7     -.1552785348502710070944567249265786D-10,
     8     0.2631585143067635679640080329298370D-12,
     9     0.2644140451228796309523148771050544D-09,
     *     0.1398347513976824490713590860867275D-09,
     1     -.2474876387135309336278444115517295D-08,
     2     -.3742131982301711593270157002652734D-08,
     3     0.4822685827409090410819485526802321D-08,
     4     0.5434012893266014107196708387798448D-07,
     5     0.2162535537258660750810256931258058D-06,
     6     -.5087209987085116139800977235640720D-06,
     7     -.3687170511784812379681130019075168D-05,
     8     0.3013401665575959392017738010428412D-05,
     9     0.3462840488950703015951509992239004D-04,
     *     -.7391082307040561721865442431241865D-05,
     1     0.9997773745906966069429746472978355D+00,
     2     -.5760308362453002515103282288195725D-04,
     3     -.8232785816281969304537348286761071D-01,
     4     0.8497685803726140215310408047130028D-03,
     5     0.6197478935457376656609659458531989D-03,
     6     -.6051393819031511598232641468083857D-02,
     7     0.5661518229476807963667746177814145D-01,
     8     0.3029078893491272775493041584454107D-01,
     9     -.1351367799910902967876333036990045D+00,
     *     -.1159580151119068217842063181332753D+00,
     1     0.2097181529618858016690319216791280D+00,
     2     0.3491739446082712882834047064081758D+00,
     3     -.1355930239995873514281574832537103D+00,
     4     -.8303165281488410881296506924746789D+00,
     5     -.3998989885410727164218974185727039D+00,
     6     0.1532261786507051614804991008412324D+01,
     7     0.1739827163833384084966168643520830D+01,
     8     -.2072074224083237865357228876345095D+01,
     9     -.3821806427729717514196253923590623D+01,
     *     0.1665564507806771806617906333168193D+01,
     1     0.5740464436334333093144252999716545D+01,
     2     0.3644137370043875289543931965948609D+00,
     3     -.6021855745382256802969735808823762D+01,
     4     -.3669988943207155442369925438805891D+01,
     5     0.3866409829337846324973250624475070D+01,
     6     0.6563236530650471420163592058533105D+01,
     7     -.2569794913967129094245724266787805D+00,
     8     -.7173033440072783110119578929854692D+01,
     9     -.2613836866836628575232399564676347D+01,
     *     0.5210172987178928925933170771776340D+01,
     1     0.3312806204904819458304257275995839D+01,
     2     -.2274472023903535543885090825951422D+01,
     3     -.2294755013882049667016835278499379D+01,
     4     0.2182486854013026447745402633603008D+00,
     5     0.9799884194626848151842869478872436D+00,
     6     0.4308191467171415655723984242560762D+00,
     7     -.2327327886891870124105509189895922D+00,
     8     -.3088169436453940165566216485519663D+00,
     9     0.1357381672464918465887724448890755D-01,
     *     0.1010359147062409150978093220789790D+00,
     1     0.6471766531078789548157033835642731D-02,
     2     -.1620497627355337218745817644804689D-01,
     3     -.1135308224049640781283204731550045D-02,
     4     0.9111164550951107686879834891021036D-03/

c  rsmall=0.29990E+01, rlarge=0.15001E+02, iback=  1, m=  30 relerr=0.3650E-20
        data cm1p1/
     1     0.9999999999999616530129726204118972D+00,
     2     0.1418068323475849253560040164128493D-12,
     3     -.8333333331588834315550266479143365D-01,
     4     -.1835547550254240153856237333101240D-10,
     5     0.3472220209921430621791461009957722D-02,
     6     0.6642951209023178162824552772104754D-09,
     7     0.5545921793693552519468756113301153D-01,
     8     0.1920907032596598279556940591393661D-07,
     9     -.1747700930948854883484805184392281D+00,
     *     -.2723587241565524349341349328340071D-05,
     1     0.4755798507928531987838374344711132D+00,
     2     0.1232933980014901858723580265304734D-03,
     3     -.1204471960148824438126307117291816D+01,
     4     -.3337998913125485838389737350708574D-02,
     5     0.2416053497707699858477253033412172D+01,
     6     0.5992040464726878603299387665170342D-01,
     7     0.7140193412402022132423349753933783D+00,
     8     -.6976469965158414141673626074449195D+00,
     9     -.6036754068221037414502020620593124D+02,
     *     0.3860779623900767215772300967835172D+01,
     1     0.6054513504820998618653994091816127D+03,
     2     0.3242927947561584539754931649604213D+02,
     3     -.4594636710834456672681059608403698D+04,
     4     -.1084194909335682046008970935246809D+04,
     5     0.2835857375215545772409060102311543D+05,
     6     0.1476671422745511963323975637769287D+05,
     7     -.1355484095227384227486068545798360D+06,
     8     -.1362969932070883866808755210132684D+06,
     9     0.4272233588541627698314452435685473D+06,
     *     0.9364053856255105585676000082039855D+06,
     1     -.1871773441901713793230524469721321D+06,
     2     -.4901463685355234020566921647030172D+07,
     3     -.7667469813313050864717902810558980D+07,
     4     0.1929399691963348684184650544523174D+08,
     5     0.5662162011987749000172972007417902D+08,
     6     -.5337968776193241386842946999301327D+08,
     7     -.2454462605409856941315656534378707D+09,
     8     0.7696998430631853081062228998485503D+08,
     9     0.7365240608302233965546841991403062D+09,
     *     0.1189887084501709085717820403385906D+09,
     1     -.1520029396369901158493962035476297D+10,
     2     -.1116774470766595083653075005336227D+10,
     3     0.1815763633920165246027017725066048D+10,
     4     0.3700181245028645039829863235760298D+10,
     5     0.2369700510521407405615994505690141D+09,
     6     -.7697323521213282832916964169041093D+10,
     7     -.6054186527420969141213008236130512D+10,
     8     0.1050943705019098189508284848009227D+11,
     9     0.1344734759118341752882051578838234D+11,
     *     -.8286966010265704231677412910594740D+10,
     1     -.1653860032690583289873461721807155D+11,
     2     0.8788933313378605554842577774043604D+09,
     3     0.1210803865494901281337169025545720D+11,
     4     0.5832016054883092537107201139238371D+10,
     5     -.4588132377053201608201422098125503D+10,
     6     -.6459121075828253184684117076059390D+10,
     7     0.3355976956134879235738220849870019D+09,
     8     0.3001297494689529208314034442139872D+10,
     9     0.2159044206737660752610395665534837D+09,
     *     -.5155362763889643582885203257063205D+09/


c  rsmall=0.14999E+02, rlarge=0.12000E+03, iback=  1, m=  20 relerr=0.2168E-20
        data cm1p2/
     1     0.1000000000000000021128944801002741D+01,
     2     0.1786730596931747100966348547111513D-16,
     3     -.8333333333333706244746761095963915D-01,
     4     -.9772316643748386090278473178875544D-14,
     5     0.3472222221966230787269230365677050D-02,
     6     0.1857509953141556355031146405716262D-11,
     7     0.5545910506377929156889548146926966D-01,
     8     -.1703676065407250103301743767222107D-09,
     9     -.1747665243537260660890912653343747D+00,
     *     0.7209735681962420838642301410434213D-08,
     1     0.4755218036994796110275329462468120D+00,
     2     0.4588672279710421474500381026879195D-07,
     3     -.1204574828498663060526522136198494D+01,
     4     -.2343257652336844588637947678655337D-04,
     5     0.2447646006946414170809777163486499D+01,
     6     0.1448840430269318185529613205000554D-02,
     7     -.1944357024737952970674288381114706D+00,
     8     -.5128410627994775655092516400789800D-01,
     9     -.4477507051239459980760403398710740D+02,
     *     0.1197339808384816556163106344235512D+01,
     1     0.4216345970940922307872877128268620D+03,
     2     -.1873258421708319021653547356286683D+02,
     3     -.3099084622611383284743762281839275D+04,
     4     0.1806450130451639681077230357852312D+03,
     5     0.2091388491639058536788300254436800D+05,
     6     -.5929621115362455814751127312242815D+03,
     7     -.1289599635505487478464200889211248D+06,
     8     -.1082148266028202616851372705424783D+05,
     9     0.6708529552568161104110363908389005D+06,
     *     0.1980886275086523767761640438249889D+06,
     1     -.2633787718258661615013573740591386D+07,
     2     -.1681333211328819307824341458435551D+07,
     3     0.6709634189481756104240409576051259D+07,
     4     0.8593195040138141453170806165385343D+07,
     5     -.7657128190812084144329761436801832D+07,
     6     -.2657262785871718223395609146180483D+08,
     7     -.5980344802687574850901932376737965D+07,
     8     0.4480168428418700470345483846024087D+08,
     9     0.1920932234776587103701791313429172D+08,
     *     -.3006601361025927707355235699819602D+08/

cccc        m=-1
cccc        call coefdumpm1(80+m,cm1p0,32)
cccc        call coefdumpm1(80+m,cm1p1,30)
cccc        call coefdumpm1(80+m,cm1p2,20)
c     
c        if z is not in the right upper quadrant - bomb out
c
        ier=0
        com=z
        if( (rea(1) .ge. 0) .and. (rea(2) .ge. 0) ) goto 1400
        ier=4
        return
 1400 continue
c

        done=1
        thresh0=1**2
        thresh1=3**2
        thresh2=15**2
        thresh3=120**2
c
c       check if if the user-specified z is in one of the 
c       intermediate regimes 
c
        d=z*dconjg(z)
        if( (d .le. thresh0) .or. (d .gt. thresh3) ) goto 3000
c
c        the user-specified z is in one of the intermediate regimes.
c        act accordingly
c
c
        if(d .gt. thresh1) goto 1900
c
c       z is in the first intermediate regime: its absolute value is 
c       between 1 and 3. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=32
        call abramm1p(cm1p0,m,cd,jm1)
        jm1=dc*sqrt(3/nu)*jm1*(nu**10)
        if (ifexpon .eq. 1) jm1=jm1*exp(-nu)
        
        return
 1900 continue
c
        if(d .gt. thresh2) goto 2000
c
c       z is in the first intermediate regime: its absolute value is 
c       between 3 and 15. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abramm1p(cm1p1,m,cd,jm1)
        jm1=dc*sqrt(3/nu)*jm1
        if (ifexpon .eq. 1) jm1=jm1*exp(-nu)

        return
 2000 continue
c
        if(d .gt. thresh3) goto 3000
c       z is in the second intermediate regime: its absolute value is
c       between 15 and 120. act accordingly.
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=20
        call abramm1p(cm1p2,m,cd,jm1)
        jm1=dc*sqrt(3/nu)*jm1
        if (ifexpon .eq. 1) jm1=jm1*exp(-nu)

        return

        return
 3000 continue
c
c        z is either in the local regime or the asymptotic one.
c        if it is in the local regime - act accordingly.
c
        if(d .ge. 14400.d0) goto 4000
        call abramm1series(z,jm1,ifexpon)
        return
c
c        z is in the asymptotic regime. act accordingly.
c
 4000 continue
        call abramm1asym(z,jm1,ifexpon)
        return
        end
c
c
c
c
c
cccc        subroutine coefdumpm1(iw,coef,m)
cccc        implicit real *8 (a-h,o-z)
cccc        real *8 coef(1)
ccccc
cccc        write(iw,1200)
cccc 1200 format(10x)
ccccc
cccc      write(iw,1200)
cccc        write(iw,*) '\begin{table}[th]'
cccc        write(iw,*) '\caption{}'
cccc        write(iw,*) '\centering'
cccc        write(iw,*) '\begin{tabular}{SS}'
cccc        write(iw,*) '\toprule'
cccc        write(iw,*) '{real part} & {imaginary part}\\'
cccc        write(iw,*) '\midrule'
ccccc
cccc 1600 format(5x,D27.20,1x,'&',1x,D27.20,1x,'\\')
ccccc
cccc        do 2000 i=1,m
cccc              write(iw,1600) coef(2*i-1), coef(2*i)
cccc 2000   continue
cccc
cccc        write(iw,*) '\bottomrule'
cccc        write(iw,*) '\end{tabular}'
cccc        write(iw,*) '\label{tabm1}'
cccc        write(iw,*) '\end{table}'
cccc        
cccc        return
cccc        end

