@function Readme()
%README
%
% Copyright (C) 2019: Jiang, Shidong
% Contact: Jiang, Shidong <shidong.jiang@njit.edu> 
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met: 
%
% 1. Redistributions of source code must retain the above copyright notice, this
%    list of conditions and the following disclaimer. 
%
% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.
%
% 3. Neither the name of the copyright holders nor the names of its
%    contributors may be used to endorse or promote products derived
%    from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
% FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
% COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
% INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
% BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
% LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
% LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
% ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.
%


@function jm1=abramm1(z,ifexpon)
%
%  This subroutine evaluates the Abramowitz functions J_{-1}
%  for a user-specified complex number z with Re(z)>=0.
%
%  The code is reasonably accurate (almost 15-digit relative
%  accuracy when ifexpon=0) and reasonably fast (O(1) cost for any z).
%
%  When ifexpon=1, that is, the Abramowitz function is evaluated
%  honestly. The subroutine will lose accuracy gradually
%  simply due to the ill-conditioning of evaluating the
%  exponential factor exp(-nu) with nu=3(z/2)**(2/3).
%  The condition number of evaluating exp(-nu) is abs(nu).
%  Thus, the subroutine will lose an extra log_{10}abs(nu)
%  digits if the function is evaluated honestly.
%
%
%  Input parameters:
%
%  z - the complex number for which the Abramowitz function
%        J_{-1} is to be evaluated
%
%  ifexpon - the integer parameter telling the subroutine whether
%        to calculate the actual values of the Abramowitz function,
%        or the values of the Abramowitz function scaled by e^{nu}.
%        Permitted values: 0 and 1.
%    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz
%        function honestly
%    ifexpon = 0 will cause the subroutine to scale the Abramowitz
%        function by e^{nu}, where nu=3(z/2)^(2/3).
%
%  Output parameters:
%
%  jm1 - the said Abramowitz function
%

if( nargin < 2 ), ifexpon = 0; end

ifexpon = double(ifexpon);
[n, m] = size(z);

jm1 = zeros(n,m)+1i*zeros(n,m);

npts = double(n*m);

# FORTRAN abramm1mex(int[1] npts, dcomplex[] z, inout dcomplex[] jm1, int[1] ifexpon);



@function j0=abram0(z,ifexpon)
%
%  This subroutine evaluates the Abramowitz functions J_{0}
%  for a user-specified complex number z with Re(z)>=0.
%
%  The code is reasonably accurate (almost 15-digit relative
%  accuracy when ifexpon=0) and reasonably fast (O(1) cost for any z).
%
%  When ifexpon=1, that is, the Abramowitz function is evaluated
%  honestly. The subroutine will lose accuracy gradually
%  simply due to the ill-conditioning of evaluating the
%  exponential factor exp(-nu) with nu=3(z/2)**(2/3).
%  The condition number of evaluating exp(-nu) is abs(nu).
%  Thus, the subroutine will lose an extra log_{10}abs(nu)
%  digits if the function is evaluated honestly.
%
%
%  Input parameters:
%
%  z - the complex number for which the Abramowitz function
%        J_{0} is to be evaluated
%
%  ifexpon - the integer parameter telling the subroutine whether
%        to calculate the actual values of the Abramowitz function,
%        or the values of the Abramowitz function scaled by e^{nu}.
%        Permitted values: 0 and 1.
%    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz
%        function honestly
%    ifexpon = 0 will cause the subroutine to scale the Abramowitz
%        function by e^{nu}, where nu=3(z/2)^(2/3).
%
%  Output parameters:
%
%  j0 - the said Abramowitz function
%

if( nargin < 2 ), ifexpon = 0; end

ifexpon = double(ifexpon);
[n, m] = size(z);

j0 = zeros(n,m)+1i*zeros(n,m);

npts = double(n*m);

# FORTRAN abram0mex(int[1] npts, dcomplex[] z, inout dcomplex[] j0, int[1] ifexpon);



@function j1=abram1(z,ifexpon)
%
%  This subroutine evaluates the Abramowitz functions J_{1}
%  for a user-specified complex number z with Re(z)>=0.
%
%  The code is reasonably accurate (almost 15-digit relative
%  accuracy when ifexpon=0) and reasonably fast (O(1) cost for any z).
%
%  When ifexpon=1, that is, the Abramowitz function is evaluated
%  honestly. The subroutine will lose accuracy gradually
%  simply due to the ill-conditioning of evaluating the
%  exponential factor exp(-nu) with nu=3(z/2)**(2/3).
%  The condition number of evaluating exp(-nu) is abs(nu).
%  Thus, the subroutine will lose an extra log_{10}abs(nu)
%  digits if the function is evaluated honestly.
%
%
%  Input parameters:
%
%  z - the complex number for which the Abramowitz function
%        J_{1} is to be evaluated
%
%  ifexpon - the integer parameter telling the subroutine whether
%        to calculate the actual values of the Abramowitz function,
%        or the values of the Abramowitz function scaled by e^{nu}.
%        Permitted values: 0 and 1.
%    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz
%        function honestly
%    ifexpon = 0 will cause the subroutine to scale the Abramowitz
%        function by e^{nu}, where nu=3(z/2)^(2/3).
%
%  Output parameters:
%
%  j1 - the said Abramowitz function
%

if( nargin < 2 ), ifexpon = 0; end

ifexpon = double(ifexpon);
[n, m] = size(z);

j1 = zeros(n,m)+1i*zeros(n,m);

npts = double(n*m);

# FORTRAN abram1mex(int[1] npts, dcomplex[] z, inout dcomplex[] j1, int[1] ifexpon);



@function j2=abram2(z,ifexpon)
%
%  This subroutine evaluates the Abramowitz functions J_{2}
%  for a user-specified complex number z with Re(z)>=0.
%
%  The code is reasonably accurate (almost 15-digit relative
%  accuracy when ifexpon=0) and reasonably fast (O(1) cost for any z).
%
%  When ifexpon=1, that is, the Abramowitz function is evaluated
%  honestly. The subroutine will lose accuracy gradually
%  simply due to the ill-conditioning of evaluating the
%  exponential factor exp(-nu) with nu=3(z/2)**(2/3).
%  The condition number of evaluating exp(-nu) is abs(nu).
%  Thus, the subroutine will lose an extra log_{10}abs(nu)
%  digits if the function is evaluated honestly.
%
%
%  Input parameters:
%
%  z - the complex number for which the Abramowitz function
%        J_{2} is to be evaluated
%
%  ifexpon - the integer parameter telling the subroutine whether
%        to calculate the actual values of the Abramowitz function,
%        or the values of the Abramowitz function scaled by e^{nu}.
%        Permitted values: 0 and 1.
%    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz
%        function honestly
%    ifexpon = 0 will cause the subroutine to scale the Abramowitz
%        function by e^{nu}, where nu=3(z/2)^(2/3).
%
%  Output parameters:
%
%  j2 - the said Abramowitz function
%

if( nargin < 2 ), ifexpon = 0; end

ifexpon = double(ifexpon);
[n, m] = size(z);

j2 = zeros(n,m)+1i*zeros(n,m);

npts = double(n*m);

# FORTRAN abram1mex(int[1] npts, dcomplex[] z, inout dcomplex[] j2, int[1] ifexpon);
