c
c
c
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c        this is the end of the debugging code and the beginning of the
c        Abramowitz function code proper.
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
        subroutine abram0(z,j0,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,j0,j0u,com,zu,ima
        real *8 rea(2)
        equivalence (rea(1),com)
        data ima/(0.0d0,1.0d0)/,
     $     pi/3.141592653589793238462643383279502884197d0/
c
c        this subroutine evaluates the Abramowitz function J_0
c        for a user-specified complex number z with Re(z)>=0.
c
c        The code is reasonably accurate (almost 15-digit relative 
c        accuracy when ifexpon=0) 
c        and reasonably fast (O(1) cost for any z).
c
c        When ifexpon=1, that is, the Abramowitz function is evaluated
c        honestly. The subroutine will lose accuracy gradually
c        simply due to the ill-conditioning of evaluating the 
c        exponential factor exp(-nu) with nu=3(z/2)**(2/3).
c        The condition number of evaluating exp(-nu) is abs(nu). 
c        Thus, the subroutine will lose an extra log_{10}abs(nu) 
c        digits if the function is evaluated honestly.
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c      J_0 is to be evaluated
c
c  ifexpon - the integer parameter telling the subroutine whether
c        to calculate the actual values of the Abramowitz function,
c        or the values of the Abramowitz function scaled by e^{nu}.
c        Permitted values: 0 and 1. 
c    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz 
c        function honestly
c    ifexpon = 0 will cause the subroutine to scale the Abramowitz 
c        function by e^{nu}, where nu=3(z/2)^(2/3).
c        
c
c                      output parameters:
c
c  j0 - the said Abramowitz function
c        
c       
c        . . . if z in the upper half-plane - act accordingly
c
        com=z 
        if(rea(2) .lt. 0) goto 1400
        call abram0ur(z,ier,j0,ifexpon)
        return
 1400 continue
c
c       z is in the right lower quadrant. compute 
c       j0 at the points zu obtained from z by reflection
c       in the x axis.
c
        zu=dconjg(z)
c
        call abram0ur(zu,ier,j0u,ifexpon)
        j0=dconjg(j0u)

        return
        end
c
c
c
c
c
        subroutine abram0p(p,m,z,f)
        implicit real *8 (a-h,o-z)
        complex *16 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram0pr(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram0pc(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1)
        complex *16 z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram0asym(z,j0,ifexpon)
c
c        evaluate the asymptotic expansion for J_0 at
c        the user-supplied point z.
c
        implicit real *8 (a-h,o-z)
        dimension c(51),d(51)
        complex *16 z,j0,nu,pp,cd
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
        data c/
     1     +1.0000000000000000000000000000000000000000000000000D0,
     2     -8.3333333333333333333333333333333333333333333333333D-2,
     3     +8.6805555555555555555555555555555555555555555555556D-2,
     4     -1.1815200617283950617283950617283950617283950617284D-1,
     5     +1.7968950938786008230452674897119341563786008230453D-1,
     6     -2.4323723770790466392318244170096021947873799725652D-1,
     7     +1.1651670400406997789971040999847584209724127419601D-2,
     8     +2.3768020513211179420375450896712899456383681349388D0,
     9     -1.6826224328954810645913841153110128876018222154482D1,
     *     +9.0244569395586014925680730379955943682679105802275D1,
     1     -4.0800203045505824157718080242125269105862906491763D2,
     2     +1.3696211083337200294199168266699217000901183623254D3,
     3     -8.6935525011723254772789760162494159324235075497001D1,
     4     -5.9316121034919022731233929247252308510931227208856D4,
     5     +7.7598950258393226012201488230445114882234011840356D5,
     6     -7.2653688041073530680389942768295103179506018412275D6,
     7     +5.4642524775359685215306011901154861821666249747786D7,
     8     -2.9278452929635176402724096737872829805890796250035D8,
     9     +2.0389307909491662278047407034415495674585422255388D7,
     *     +2.9518755444497944432256993104951175749915753740843D10,
     1     -5.6330525855958828035571886442279391681643563542705D11,
     2     +7.5270725327661296589338202094296370333138602359484D12,
     3     -7.9191623987328084663763444905047039037324110644853D13,
     4     +5.8276077180856447252490832066070780156520803410323D14,
     5     -4.2484620470726986069242114172615216088979502830867D13,
     6     -1.0625288783191550279852799909229754918259580622466D17,
     7     +2.6651629420674278804798182392760401071236164770618D18,
     8     -4.6272804749758684287085925708777908985088513355305D19,
     9     +6.2564908363380160636009791499012325534653465997552D20,
     *     -5.8556352555986080237445848293897316478536224264195D21,
     1     +4.3867450023803168669774062611348523089897643264582D20,
     2     +1.6854292975785847354274755946950643648553039420638D24,
     3     -5.2388720730251025281768742008323109244910246234648D25,
     4     +1.1191241302124144133162667966067997683682427189896D27,
     5     -1.8488900631987894106931412167399413932023336176668D28,
     6     +2.1002628679846678576602112368415928179901320388185D29,
     7     -1.6020480927507280103247579187308677355719850077871D28,
     8     -8.7650823186013127645718507501445583867594067384073D31,
     9     +3.2503870329066222083050789733713187363211578259040D33,
     *     -8.2435703729613286589063297853192909520696749122770D34,
     1     +1.6092156699417117261596626665475609380593972763576D36,
     2     -2.1498797084335590088262994611677638875407793347984D37,
     3     +1.6610550370176307805518636041121334695526509186536D36,
     4     +1.2272250233507804383699234571612957959655153064238D40,
     5     -5.2873009020066766917001325243275047249938276315390D41,
     6     +1.5524426716619640353051063885665732698380388400298D43,
     7     -3.4962332152476886123311371245365176231648936075726D44,
     8     +5.3701996041102499664608084219671338270003145345903D45,
     9     -4.1890963727257743240678590760882807758499527185278D44,
     *     -4.0187109779190962123954363104512119896049721137450D48,
     1     +1.9725199443805826208093188430039806942969915161978D50/

c
        m=18
        nu=3*((z/2)**toth)

cccc        do i=1,51
cccc           d(i)=c(i)/(3*(120.0d0/2)**(2.0d0/3))**i
cccc        enddo
cccc        call prin2('d=*',d,51)
cccc        pause
        
        pp=c(m+1)
        cd=1/nu
c
        do 1800 i=m,1,-1
        pp=pp*cd+c(i)
 1800 continue
c 
        j0=dc*pp
c
        if (ifexpon .eq. 1) j0=j0*exp(-nu)
        return
        end
c
c
c
c
c
        subroutine abram0series(z,j0,ifexpon)
        implicit real *8 (a-h,o-z)
        dimension a(25),b(50)
        complex *16 z,j0,lnz,z2,c1,c2,nu
c
c
c        this subroutine evaluates the Abramowitz function J_0
c        for a user-specified complex number z in the local regime,
c        i. e. for cdabs(z) < 1, using the series expansion 
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c        J_0 is to be evaluated
c
c                      output parameters:
c
c  j0 - the said Abramowitz function
c        
        data a/
     2     -2.0000000000000000000000000000000000000000000000000D0,
     4     +3.3333333333333333333333333333333333333333333333333D-1,
     6     -8.3333333333333333333333333333333333333333333333333D-3,
     8     +6.6137566137566137566137566137566137566137566137566D-5,
     *     -2.2964432686654908877131099353321575543797766019988D-7,
     2     +4.1753513975736197958420180642402864625086847309070D-10,
     4     -4.4608455102282262776089936583763744257571418065245D-13,
     6     +3.0345887824681811412306079308682819222837699364112D-16,
     8     -1.3945720507666273626978896741122619128142325075419D-19,
     *     +4.5307733943035326923258274012744051748350633773292D-23,
     2     -1.0787555700722696886490065241129536130559674707927D-26,
     4     +1.9381163673594496741807519297753388664318495702348D-30,
     6     -2.6918282879992356585843776802435262033775688475483D-34,
     8     +2.9496255621293399721503152314743876872425694143637D-38,
     *     -2.5946741398041343878873286694883776277643995552108D-42,
     2     +1.8599814622251859411378700139701631740246591793626D-46,
     4     -1.1008413010328988761469401124349924088687613514220D-50,
     6     +5.4416277856297522300886807337369866973245741543351D-55,
     8     -2.2696145252042676969005174898802914153005397707437D-59,
     *     +8.0602831351810060973809130260682272011525668397745D-64,
     2     -2.4574033948722579565185710445329960979123679389556D-68,
     4     +6.4794689523605388296117994107815116224024888966821D-73,
     6     -1.4874813940221622657511017931087033109280277540592D-77,
     8     +2.9913554157224837424106137495650229476089525681922D-82,
     *     -5.2993116066512254506990748114459731923344539544221D-87/


        data b/
     1     -1.7724538509055160272981674833411451827975494561224D0,
     2     +2.6835300529540141818046372975279270687352199218023D-1,
     3     +1.7724538509055160272981674833411451827975494561224D0,
     4     -4.8916994532701134747452173273657656225669810980782D-1,
     5     -9.8469658383639779294342637963396954599863858673466D-2,
     6     +1.8062581966508617020196376651747747389750786078529D-2,
     7     +1.3129287784485303905912351728452927279981847823129D-3,
     8     -1.7484790424414750217590976682541044161681777814907D-4,
     9     -6.6986162165741346458736488410474118775417590934331D-6,
     *     +6.9003789666065488683377121580855861174433144031200D-7,
     1     +1.6539793127343542335490490965549165129732738502304D-8,
     2     -1.3760791254942414610313518269752785366263098109209D-9,
     3     -2.2782084197442895778912521991114552520293028240088D-11,
     4     +1.5788316272729113463256804298998502922367229103736D-12,
     5     +1.9257890276790275383696130170003848284271367912162D-14,
     6     -1.1376169807979124663099205130412199832946006968810D-15,
     7     -1.0698827931550152990942294538891026824595204395646D-17,
     8     +5.4843743696166248199349085478203605689667738841116D-19,
     9     +4.1133517614571906924038041287547200402134580529203D-21,
     *     -1.8559861431739840375659942328929793988883889143369D-22,
     1     -1.1394326209022688898625496201536620610009579093962D-24,
     2     +4.5782594964725351387196015175904345783282354703001D-26,
     3     +2.3488613088069859613740458053054258111749286938697D-28,
     4     -8.4858616614283542478410380200101148500491157350946D-30,
     5     -3.7001595916934246398456928249927942835143804251256D-32,
     6     +1.2117911129725953297671292719466305523484783123273D-33,
     7     +4.5540425743919072490408527076834391181715451386161D-36,
     8     -1.3614587100797068436089114073569627266007024262949D-37,
     9     -4.4621228438094329306690698683945121675206203592163D-40,
     *     +1.2251043162587514264946119322111213874375314892150D-41,
     1     +3.5371564358378382327935551869952534027115500271235D-44,
     2     -8.9661079601251540679735809204581336146170020493923D-46,
     3     -2.3004399296552017643038210113132501318363358657151D-48,
     4     +5.4088067448668990363123941347584874670499667550280D-50,
     5     +1.2426078591558373922669588998613137426869420762248D-52,
     6     -2.7212134078679352722394275878057129964699284360240D-54,
     7     -5.6354097920899654978093374143370237763580139511331D-57,
     8     +1.1537169567346428814806714356462056917304300648502D-58,
     9     +2.1665486878974147467645755312510183293060681831276D-61,
     *     -4.1603871750997294513790005254480434138851137231516D-63,
     1     -7.1221192896035987730590911612459511154045633896369D-66,
     2     +1.2866914079068940687555041643093440605713949697750D-67,
     3     +2.0175403783472419401884057565638228705715315117523D-70,
     4     -3.4385598809545936748655294023243283336297338499428D-72,
     5     -4.9597826302847778656482761113226384546229694472500D-75,
     6     +7.9945152260109435685488335243002132856655007073749D-77,
     7     +1.0649023360783205293930812906758214610033214057434D-79,
     8     -1.6270837932665421600479538444749642087798151832182D-81,
     9     -2.0086433078284301520165257482190686981351316692007D-84,
     *     +2.9153425827952240186139516061052134687601954185701D-86/

c
c        evaluate j0
c
        m=19
        c1=b(m)
        do k=m-1,1,-1
           c1=c1*z+b(k)
        enddo

        m2=9
        c2=a(m2)
        z2=z**2
        do k=m2-1,1,-1
           c2=c2*z2+a(k)
        enddo

        j0=-(c1+c2*z*log(z))/2

        if (ifexpon .eq. 1) return

        nu=3*(z/2)**(2.0d0/3)
        j0=j0*exp(nu)
c
        return
        end
c
c
c
c
c
        subroutine abram0ur(z,ier,j0,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,com,ima,cd,j0,nu
        dimension rea(2)
        equivalence (rea(1),com)
        real *8 c0p0(60)
        real *8 c0p1(60)
        real *8 c0p2(40)
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
        
c
c        this subroutine evaluates the Abramowitz function J_0
c        for a user-specified complex number z in the upper right quadrant.
c        it is reasonably accurate and reasonably fast.
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c        J_0 is to be evaluated
c
c                      output parameters:
c
c  ier - error return code. 
c         ier=0 means successful conclusion
c         ier=4 means that z is not in the upper right quadrant
c  J0 - the said Abramowitz function
c        

c  rsmall=0.99902E+00, rlarge=0.30010E+01, iback= 12, m=  30 relerr=0.9485E-20
        data c0p0/
     1     -.9083260764143362672332512935676840D-16,
     2     -.1297171685743825317683778693792550D-15,
     3     0.1238980462023087834254320953348465D-14,
     4     0.1237408634576947555968560314993871D-13,
     5     0.1892566593644697386292332150063019D-12,
     6     -.4359404242500190980774162182458276D-12,
     7     -.9343612469908272878196010366878434D-11,
     8     0.7161024017145594721546380669924493D-11,
     9     0.2100547137342635619225610803687455D-09,
     *     -.3157072010050849732152200379395772D-10,
     1     -.2792146960441228383064321853626835D-08,
     2     -.1026775476677610818473877356611346D-08,
     3     0.2221069728689278164313747448776632D-07,
     4     0.2528196127793348457816861842571312D-07,
     5     -.7149461367587987337202597762640491D-07,
     6     -.3077105878171587242712155031473792D-06,
     7     -.6395453921728643659059490495888455D-06,
     8     0.2426496121564185766065988774797465D-05,
     9     0.1147759993433075523579558661088671D-04,
     *     -.1269278311140014182571557368286217D-04,
     1     -.9444760138551873811779755942777286D-04,
     2     0.3658212236044231306263109053837599D-04,
     3     0.1000522713141638941944677550974537D+01,
     4     0.4252767963293379064507120002547383D-04,
     5     -.8541633969554197397387116443452178D-01,
     6     -.1166827427559770097427440916274634D-02,
     7     0.9268008875895749900270504662331708D-01,
     8     0.7552513043116410809074665335396516D-02,
     9     -.1283096218339973291395327417552051D+00,
     *     -.3199927967232258756854881349469894D-01,
     1     0.1826280190246010563590237744147409D+00,
     2     0.1011260178945178625307129679838750D+00,
     3     -.2208652496361847750536002714052353D+00,
     4     -.2479478623021964667668324048708514D+00,
     5     0.1670097950451970701231590361860159D+00,
     6     0.4757446128343865363955056560570572D+00,
     7     0.6223084134293984717694035184809936D-01,
     8     -.7054689827603726890624142955076850D+00,
     9     -.4616059043566030133311099745681319D+00,
     *     0.7740533643143866501184665223434580D+00,
     1     0.8628290514566726186140332167986861D+00,
     2     -.5488328500367703663344975047443912D+00,
     3     -.1015772540905006117822414899179611D+01,
     4     0.8965355483311568658759013319890418D-01,
     5     0.8112704293325807319306749072909869D+00,
     6     0.3422342697666139278515469655928499D+00,
     7     -.4058887078074494132831038302147905D+00,
     8     -.5041495052761235863653445864416502D+00,
     9     0.7064629577021651809548876730017193D-01,
     *     0.3902005390296432790006548686947807D+00,
     1     0.6257627820720749168919957625110175D-01,
     2     -.1866524881934061575462489509980729D+00,
     3     -.5606946374615699053986467175928070D-01,
     4     0.5136934502418948045288688043909197D-01,
     5     0.2085456505959333120142725342739491D-01,
     6     -.4962246029880776108005667326462920D-02,
     7     -.3773641137163085684806298429536169D-02,
     8     -.1070662042759497263449557912397148D-02,
     9     0.2465806281630099046233451655369492D-03,
     *     0.2479354865698634502540590864436889D-03/

c  rsmall=0.29990E+01, rlarge=0.15001E+02, iback=  1, m=  30 relerr=0.3449E-20
        data c0p1/
     1     0.9999999999998863721676538017035135D+00,
     2     -.8663540093937523284608059878861480D-13,
     3     -.8333333332313149997179021659815368D-01,
     4     0.2251932167102402524984659754879161D-10,
     5     0.8680555568942982689760442908588234D-01,
     6     -.2073449758044169793759555114945688D-08,
     7     -.1181520651417573794711807906446871D+00,
     8     0.9633927044163037207735834114536720D-07,
     9     0.1796933305718777765394004473761056D+00,
     *     -.2305704365172715791830021159643644D-05,
     1     -.2433734216979037584202434037998816D+00,
     2     0.9809835452451845395746691191949967D-05,
     3     0.1476442947387262076295614349270882D-01,
     4     0.1278232145091885704867048783664268D-02,
     5     0.2330962793790250755540686716801597D+01,
     6     -.5107370717226022077857693998235088D-01,
     7     -.1648098149028876410572940513024069D+02,
     8     0.1129158582787619923805206105079292D+01,
     9     0.9230511754444768451955074480577160D+02,
     *     -.1726209625170618060002114114188622D+02,
     1     -.5160041792275371801515541916430665D+03,
     2     0.1932875276419090727406120996225226D+03,
     3     0.3246493169113910596081524206282426D+04,
     4     -.1590105333631784381929258911098253D+04,
     5     -.2231406051292059834476116036142619D+05,
     6     0.9059966312384333544130275016612516D+04,
     7     0.1460470823132189961419068611825965D+06,
     8     -.2623332303983743762890068466795644D+05,
     9     -.8114551374097680331113694691709969D+06,
     *     -.9810480775632034408421458306927532D+05,
     1     0.3545797130458321934821618890479119D+07,
     2     0.1829494870404026471793460296298761D+07,
     3     -.1108405735172553862874812052660983D+08,
     4     -.1317016080905555755600298845343001D+08,
     5     0.1794674258772735539412346322201288D+08,
     6     0.6298660548523202800630850384692494D+08,
     7     0.3580009466624869889556496069806482D+08,
     8     -.2161445108143294515927543980981413D+09,
     9     -.3730495542756980072142055644198283D+09,
     *     0.5219469907267411822901512129841594D+09,
     1     0.1447942048845105875337247785508732D+10,
     2     -.7586769291749294135369829830046580D+09,
     3     -.3595178881656416686293341722428890D+10,
     4     0.2261839869658018401725861506245786D+08,
     5     0.6000111502150666203290341036525115D+10,
     6     0.3100621960482662145078736853091733D+10,
     7     -.6078054833266997431855883738957506D+10,
     8     -.8789154872676114392068834538597676D+10,
     9     0.1557624296133656642525057317239078D+10,
     *     0.1388513654990195675754606961029689D+11,
     1     0.5525008359853867526557251529496329D+10,
     2     -.1362249653357582822759843427763027D+11,
     3     -.9262576093448941165492847533615586D+10,
     4     0.7573278018537221277248587090344598D+10,
     5     0.6954303563614243974678486235225745D+10,
     6     -.1285036664777379953271056711001545D+10,
     7     -.2563057076491611000577807300909063D+10,
     8     -.8554175145069142408640500218497692D+09,
     9     0.3386335229755370859356130450998146D+09,
     *     0.3693969075118178020917484230342408D+09/


c  rsmall=0.14999E+02, rlarge=0.12000E+03, iback=  1, m=  20 relerr=0.2662E-20
        data c0p2/
     1     0.9999999999999999692960843966522634D+00,
     2     0.1759386403391193574563817076296976D-16,
     3     -.8333333333331990090243051678965111D-01,
     4     -.1684614789829297794956542642727611D-15,
     5     0.8680555555342381618076610557221940D-01,
     6     -.1145339470416014806318607496579110D-11,
     7     -.1181520060234767229794829849893474D+00,
     8     0.2304838596929028467756472670448880D-09,
     9     0.1796895077237004028542503800481226D+00,
     *     -.2194538599895874834488980810618933D-07,
     1     -.2432377765081432477218106276864639D+00,
     2     0.1208795462687387638305265346927428D-05,
     3     0.1170057039515293841100534647428585D-01,
     4     -.3810385479872928363528815996849273D-04,
     5     0.2374520684867458624106663505896208D+01,
     6     0.4134640017349302545809369429142395D-03,
     7     -.1675883706652038995663480477822254D+02,
     8     0.2043763057769696094186771375917978D-01,
     9     0.8896654576542165094187281196082707D+02,
     *     -.1206431723878608137292585059882851D+01,
     1     -.3949437406535255332031755537044870D+03,
     2     0.3391208043771904980632310983391767D+02,
     3     0.1405989726439335334962138372775692D+04,
     4     -.6247482046470992728603953272937372D+03,
     5     -.4045135532208601993508308081569922D+04,
     6     0.8087635865067899699631987091374712D+04,
     7     0.1938454310435981193272583452472711D+05,
     8     -.7455959979032223938594543534391615D+05,
     9     -.2051768835268013603007758650784586D+06,
     *     0.4808628990089541231971370280049488D+06,
     1     0.1704352184083088838430151766063805D+07,
     2     -.2051864736091852140883599644895518D+07,
     3     -.8770507703315377937248798090339028D+07,
     4     0.4990398290507562940811930745144117D+07,
     5     0.2679719529099864389331938143740147D+08,
     6     -.3087480734551443638169307523306853D+07,
     7     -.4344879545118098554611633892265551D+08,
     8     -.1419819072058557759030375483045155D+08,
     9     0.2669307441988898863555094932709332D+08,
     *     0.2567451158302981172246270276131750D+08/

cccc        m=0
cccc        call coefdump0(80+m,c0p0,30)
cccc        call coefdump0(80+m,c0p1,30)
cccc        call coefdump0(80+m,c0p2,20)
c     
c        if z is not in the right upper quadrant - bomb out
c
        ier=0
        com=z
        if( (rea(1) .ge. 0) .and. (rea(2) .ge. 0) ) goto 1400
        ier=4
        return
 1400 continue
c

        done=1
        thresh0=1**2
        thresh1=3**2
        thresh2=15**2
        thresh3=120**2
c
c       check if if the user-specified z is in one of the 
c       intermediate regimes 
c
        d=z*dconjg(z)
        if( (d .le. thresh0) .or. (d .gt. thresh3) ) goto 3000
c
c        the user-specified z is in one of the intermediate regimes.
c        act accordingly
c
c
        if(d .gt. thresh1) goto 1900
c
c       z is in the first intermediate regime: its absolute value is 
c       between 1 and 3. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abram0p(c0p0,m,cd,j0)
        j0=dc*j0*(nu**11)

        if (ifexpon .eq. 1) j0=j0*exp(-nu)

        return
 1900 continue
c
        if(d .gt. thresh2) goto 2000
c
c       z is in the first intermediate regime: its absolute value is 
c       between 3 and 15. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abram0p(c0p1,m,cd,j0)
        j0=dc*j0
        if (ifexpon .eq. 1) j0=j0*exp(-nu)

        return
 2000 continue
c
        if(d .gt. thresh3) goto 3000
c       z is in the second intermediate regime: its absolute value is
c       between 15 and 120. act accordingly.
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=20
        call abram0p(c0p2,m,cd,j0)
        j0=dc*j0
        if (ifexpon .eq. 1) j0=j0*exp(-nu)

        return
 3000 continue
c
c        z is either in the local regime or the asymptotic one.
c        if it is in the local regime - act accordingly.
c
        if(d .ge. 14400.d0) goto 4000
        call abram0series(z,j0,ifexpon)
        return
c
c        z is in the asymptotic regime. act accordingly.
c
 4000 continue
        call abram0asym(z,j0,ifexpon)
        return
        end
c
c
c
c
c
cccc        subroutine coefdump0(iw,coef,m)
cccc        implicit real *8 (a-h,o-z)
cccc        real *8 coef(1)
ccccc
cccc        write(iw,1200)
cccc 1200 format(10x)
ccccc
cccc      write(iw,1200)
cccc        write(iw,*) '\begin{table}[th]'
cccc        write(iw,*) '\caption{}'
cccc        write(iw,*) '\centering'
cccc        write(iw,*) '\begin{tabular}{SS}'
cccc        write(iw,*) '\toprule'
cccc        write(iw,*) '{real part} & {imaginary part}\\'
cccc        write(iw,*) '\midrule'
ccccc
cccc 1600 format(5x,D27.20,1x,'&',1x,D27.20,1x,'\\')
ccccc
cccc        do 2000 i=1,m
cccc              write(iw,1600) coef(2*i-1), coef(2*i)
cccc 2000   continue
cccc
cccc        write(iw,*) '\bottomrule'
cccc        write(iw,*) '\end{tabular}'
cccc        write(iw,*) '\label{tab0}'
cccc        write(iw,*) '\end{table}'
cccc        
cccc        return
cccc        end

