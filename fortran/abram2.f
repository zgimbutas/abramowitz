c
c
c
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c        this is the end of the debugging code and the beginning of the
c        Abramowitz function code proper.
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
        subroutine abram2(z,j2,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,j2,j2u,com,zu,ima
        real *8 rea(2)
        equivalence (rea(1),com)
        data ima/(0.0d0,1.0d0)/,
     $     pi/3.141592653589793238462643383279502884197d0/
c
c        this subroutine evaluates the Abramowitz functions J_2
c        for a user-specified complex number z with Re(z)>=0.
c        
c        The code is reasonably accurate (almost 15-digit relative 
c        accuracy when ifexpon=0) 
c        and reasonably fast (O(1) cost for any z).
c
c        When ifexpon=1, that is, the Abramowitz function is evaluated
c        honestly. The subroutine will lose accuracy gradually
c        simply due to the ill-conditioning of evaluating the 
c        exponential factor exp(-nu) with nu=3(z/2)**(2/3).
c        The condition number of evaluating exp(-nu) is abs(nu). 
c        Thus, the subroutine will lose an extra log_{10}abs(nu) 
c        digits if the function is evaluated honestly.
c        
c
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c        J_2 is to be evaluated
c
c  ifexpon - the integer parameter telling the subroutine whether
c        to calculate the actual values of the Abramowitz function,
c        or the values of the Abramowitz function scaled by e^{nu}.
c        Permitted values: 0 and 1. 
c    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz 
c        function honestly
c    ifexpon = 0 will cause the subroutine to scale the Abramowitz 
c        function by e^{nu}, where nu=3(z/2)^(2/3).
c        
c
c                      output parameters:
c
c  j2 - the said Abramowitz function
c        
c       
c        . . . if z in the upper half-plane - act accordingly
c
        com=z 
        if(rea(2) .lt. 0) goto 1400
        call abram2ur(z,ier,j2,ifexpon)
        return
 1400 continue
c
c       z is in the right lower quadrant. compute 
c       j2 at the points zu obtained from z by reflection
c       in the x axis.
c
        zu=dconjg(z)
c
        call abram2ur(zu,ier,j2u,ifexpon)
        j2=dconjg(j2u)

        return
        end
c
c
c
c
c
        subroutine abram2p(p,m,z,f)
        implicit real *8 (a-h,o-z)
        complex *16 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram2pr(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram2pc(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1)
        complex *16 z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram2asym(z,j2,ifexpon)
c
c        evaluate the asymptotic expansion for J_2 at
c        the user-supplied point z.
c
        implicit real *8 (a-h,o-z)
        dimension c(51)
        complex *16 z,j2,nu,pp,cd
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
        data c/
     1     +1.0000000000000000000000000000000000000000000000000D0,
     2     +1.4166666666666666666666666666666666666666666666667D0,
     3     -1.2152777777777777777777777777777777777777777777778D-1,
     4     +1.8566743827160493827160493827160493827160493827160D-1,
     5     -3.5199451838991769547325102880658436213991769547325D-1,
     6     +7.4505506392532578875171467764060356652949245541838D-1,
     7     -1.5693903747009733177107148300563938424020728547478D0,
     8     +2.4641895793241704254623278971701468272112990905858D0,
     9     +3.3765931072746918614052921090958356619079069924978D0,
     *     -6.9604561729484686210500760574590280639494004665303D1,
     1     +5.3956594819859491514246686656828471760950154600626D2,
     2     -3.3224022418994497487176624011744842470841158842273D3,
     3     +1.7033328329159777112976170573211527091802244453571D4,
     4     -6.0489750622577286670666591009445979661808400728065D4,
     5     -8.4094252422393569480877091780707324586162676124851D4,
     6     +4.7624684859435969638522363988894824887956699940276D6,
     7     -6.5236060492411640407337393666532058424518680632467D7,
     8     +6.6345965427244272724061424089148178382025140808591D8,
     9     -5.3961244840730159722259104894720580184152118840010D9,
     *     +2.9916346948733031846678917542122277915570169474823D10,
     1     +4.1829228052619580505549494228705186056837316260227D10,
     2     -4.5839905262650183687141353756604321782395059257333D12,
     3     +9.0167507999909832662247509807119794212237744663985D13,
     4     -1.2782423918936455170735326346078976158119085660508D15,
     5     +1.4235154288839102590791011742014725922258617332698D16,
     6     -1.0733624565391904094329367300369923719286478354685D17,
     7     -1.5053858547833294368117373666984494621517238789167D17,
     8     +2.7019176157095582426109075871313193960810939763894D19,
     9     -6.9312585173432089582185096771004715072848797065067D20,
     *     +1.2601012711598539363878303662818904384869150042858D22,
     1     -1.7815820079551951303751209667027333002863650757315D23,
     2     +1.6992475443360827335584544244176391496286216996922D24,
     3     +2.3877314410529786196242148192664826128871318824259D24,
     4     -6.3589801425099493362298606067202439133625052987110D26,
     5     +2.0120881860340403152479792315535178076681037628474D28,
     6     -4.4632968563710345503004400825851991278781523038986D29,
     7     +7.6499389872165304003565234352845051083082620916096D30,
     8     -8.8251591220794650649590291720969659268433561761993D31,
     9     -1.2416965975488320605508356543433624258121376838279D32,
     *     +4.5954584070198290638987321594974180563988985000438D34,
     1     -1.7294303311076263806974008965067518975288210631146D36,
     2     +4.5283653218245446547363006050046140054057193620856D37,
     3     -9.1203782104724494797062540739218751873527856637069D38,
     4     +1.2344506127618071322653240638391835765580693379199D40,
     5     +1.7385045190429625904602686004026156705271548204686D40,
     6     -8.5327923875107385941845391000244138003415273232039D42,
     7     +3.7226252079804441518376075822980480815819869985662D44,
     8     -1.1236908168316270942112092919581324883032930101380D46,
     9     +2.6003577116207454594094242255779716253193025965578D47,
     *     -4.0394470049640887952995722128778489794454293797018D48,
     1     -5.6929099468560966450376493773881360453519401243403D48/


c
        m=18
        nu=3*((z/2)**toth)

        pp=c(m+1)
        cd=1/nu
c
        do 1800 i=m,1,-1
        pp=pp*cd+c(i)
 1800 continue
c 
        j2=dc*(nu/3)*pp
        if (ifexpon .eq. 1) j2=j2*exp(-nu)      

c     
        return
        end
c
c
c
c
c
        subroutine abram2series(z,j2,ifexpon)
        implicit real *8 (a-h,o-z)
        dimension a(24),b(50)
        complex *16 z,j2,lnz,z2,c1,c2,nu
c
c
c        this subroutine evaluates the Abramowitz functions J_2
c        for a user-specified complex number z in the local regime,
c        i. e. for cdabs(z) < 1, using the series expansion 
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_2 is to be evaluated
c
c                      output parameters:
c
c  j2 - the said Abramowitz functions
c        
        data a/
     4     +3.3333333333333333333333333333333333333333333333333D-1,
     6     -1.6666666666666666666666666666666666666666666666667D-2,
     8     +1.9841269841269841269841269841269841269841269841270D-4,
     *     -9.1857730746619635508524397413286302175191064079953D-7,
     2     +2.0876756987868098979210090321201432312543423654535D-9,
     4     -2.6765073061369357665653961950258246554542850839147D-12,
     6     +2.1242121477277267988614255516077973455986389554879D-15,
     8     -1.1156576406133018901583117392898095302513860060335D-18,
     *     +4.0776960548731794230932446611469646573515570395963D-22,
     2     -1.0787555700722696886490065241129536130559674707927D-25,
     4     +2.1319280040953946415988271227528727530750345272582D-29,
     6     -3.2301939455990827903012532162922314440530826170579D-33,
     8     +3.8345132307681419637954098009167039934153402386728D-37,
     *     -3.6325437957257881430422601372837286788701593772952D-41,
     2     +2.7899721933377789117068050209552447610369887690439D-45,
     4     -1.7613460816526382018351041798959878541900181622752D-49,
     6     +9.2507672355705787911507572473528773854517760623697D-54,
     8     -4.0853061453676818544209314817845245475409715873387D-58,
     *     +1.5314537956843911585023734749529631682189876995572D-62,
     2     -4.9148067897445159130371420890659921958247358779113D-67,
     4     +1.3606884799957131542184778762641174407045226683032D-71,
     6     -3.2724590668487569846524239448391472840416610589303D-76,
     8     +6.8801174561617126075444116239995527795005909068420D-81,
     *     -1.2718347855962941081677779547470335661602689490613D-85/


        data b/
     1     +8.8622692545275801364908374167057259139877472806119D-1,
     2     -1.0000000000000000000000000000000000000000000000000D0,
     3     +8.8622692545275801364908374167057259139877472806119D-1,
     4     -3.2250327866034468080785506606990989559003144314115D-1,
     5     -1.4770448757545966894151395694509543189979578801020D-1,
     6     +3.1958497266350567373726086636828828112834905490391D-2,
     7     +3.2823219461213259764780879321132318199954619557822D-3,
     8     -4.9147492966365943774466051740744825606738455137842D-4,
     9     -2.3445156758009471260557770943665941571396156827016D-5,
     *     +2.6453294232093450029494293664676265692583369311481D-6,
     1     +7.4429069073045940509707209344971243083797323260367D-8,
     2     -6.6716280575925263153646582316643783600061148180593D-9,
     3     -1.2530146308593592678401887095113003886161165532048D-10,
     4     +9.2499474881260567640736328964802830321324803719154D-12,
     5     +1.2517628679913678999402484610502501384776389142905D-13,
     6     -7.8115894264619782071079131947451257869480163813464D-15,
     7     -8.0241209486626147432067209041682701184464032967343D-17,
     8     +4.3177708931549684878130323545506753595327074819122D-18,
     9     +3.4963489972386120885432335094415120341814393449823D-20,
     *     -1.6477336618850679703477656725973094331253747060166D-21,
     1     -1.0824609898571554453694221391459789579509100139264D-23,
     2     +4.5243217179689216542871511913847868976754370967605D-25,
     3     +2.4663043742473352594427480955706971017336751285632D-27,
     4     -9.2375420092032171889161042255223593917324348300923D-29,
     5     -4.2551835304474383358225467487417134260415374888944D-31,
     6     +1.4406901941271182174276332379347390318012861305551D-32,
     7     +5.6925532179898840613010658846042988977144314232701D-35,
     8     -1.7551481952929721968308332534066796061447003071116D-36,
     9     -6.0238658391427344564032443223325914261528374849420D-39,
     *     +1.7021726720632313251530200617481280542737220871250D-40,
     1     +5.1288768319648654375506550211431174339317475393290D-43,
     2     -1.3356162867076471804903477879988692263224270115120D-44,
     3     -3.5656818909655627346709225675355377043463205918583D-47,
     4     +8.5990487267353935142924836099918303268365087404737D-49,
     5     +2.0503029676071316972404821847711676754334544257710D-51,
     6     -4.5988546544473412016565834956010271605122554704692D-53,
     7     -9.8619671361574396211663404750897916086265244144829D-56,
     8     +2.0653424494963358481807059967137687880382714178766D-57,
     9     +4.0081150726102172815144647328143839092162261387860D-60,
     *     -7.8644342170135809271331964332209413503759532397892D-62,
     1     -1.3888132614727017607465227764429604675038898609792D-64,
     2     +2.5610957988394268477284154733960231406532280998553D-66,
     3     +4.1359577756118459773862318009558368846716395990923D-69,
     4     -7.1885784052428440230695527478271819425104286403966D-71,
     5     -1.0663532655112272411143793639343672677439384311587D-73,
     6     +1.7513559427522967737519878663805034062917700168522D-75,
     7     +2.3960302561762211911344329040205982872574731629227D-78,
     8     -3.7273359474344345493982407735445925654555301585608D-80,
     9     -4.7203117733968108572388355083148114406175594226215D-83,
     *     +6.9703256406752815174199884805952824590627967347962D-85/

c
c        evaluate j2
c
        m=19
        c1=b(m)
        do k=m-1,1,-1
           c1=c1*z+b(k)
        enddo

        m2=8
        c2=a(m2)
        z2=z**2
        do k=m2-1,1,-1
           c2=c2*z2+a(k)
        enddo

        j2=(c1+c2*log(z)*z2*z)/2
        if (ifexpon .eq. 1) return

        nu=3*(z/2)**(2.0d0/3)
        j2=j2*exp(nu)        
        
c
        return
        end
c
c
c
c
c
        subroutine abram2ur(z,ier,j2,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,com,ima,cd,j2,nu
        dimension rea(2)
        equivalence (rea(1),com)
        real *8 c2p0(64)
        real *8 c2p1(60)
        real *8 c2p2(40)
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
c        this subroutine evaluates the Abramowitz functions J_2
c        for a user-specified complex number z in the upper right quadrant.
c        it is reasonably accurate and reasonably fast.
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_2 is to be evaluated
c
c                      output parameters:
c
c  ier - error return code. 
c         ier=0 means successful conclusion
c         ier=4 means that z is not in the upper right quadrant
c  j2 - the said Abramowitz function
c        


c  rsmall=0.99902E+00, rlarge=0.30010E+01, iback= 12, m=  32 relerr=0.7702E-21
        data c2p0/
     1     0.3186663268581961222114202621676282D-16,
     2     0.6227873896983013798652275622115257D-16,
     3     0.2337420248811471443079626071097819D-15,
     4     -.5836818682909203139111703918018172D-14,
     5     -.1246476326292160114356771639402802D-12,
     6     0.2025919952872277099880536841599689D-12,
     7     0.5493891486738939519483037761153419D-11,
     8     -.3068816977035540169104112624088979D-11,
     9     -.1215857584210628137338689549307191D-09,
     *     0.2070611956791959229810876411505371D-12,
     1     0.1601800327392856016517218909185236D-08,
     2     0.8821684247343634123816913350599594D-09,
     3     -.1194147588144976786453683614577814D-07,
     4     -.1881553980029292430287113851229781D-07,
     5     0.1530686879034533944617968713615320D-07,
     6     0.2256703455157364971043860544288413D-06,
     7     0.8040725448124138454449562964166668D-06,
     8     -.1777286049803042372016090610183771D-05,
     9     -.1146504028697134484906135454428604D-04,
     *     0.8899309736392279272916394746113280D-05,
     1     0.9269841745069528162441840204124128D-04,
     2     -.1715304425835680987421551300098120D-04,
     3     0.9994817199154938245078871408051340D+00,
     4     -.1504619445869645324545247769666281D-03,
     5     0.1418706225241293180234498021500635D+01,
     6     0.1834914169172938799428062247418816D-02,
     7     -.1264783587337253582098517708028689D+00,
     8     -.1142827670599590865898288512853480D-01,
     9     0.1860359811147466332538177450561733D+00,
     *     0.5064689943359752450503015372373166D-01,
     1     -.2876494874858085532142607381132783D+00,
     2     -.1726824347655317146319518916900603D+00,
     3     0.3767193337238025243551361458509184D+00,
     4     0.4649607648092068247356777039876134D+00,
     5     -.2867356273030668516244242595263715D+00,
     6     -.9921599949557461837441099773641095D+00,
     7     -.2526080250369843779905971729999458D+00,
     8     0.1651198840358056825128076606280596D+01,
     9     0.1417126147297153841825608474863292D+01,
     *     -.2038124450179542680873193070738401D+01,
     1     -.2945796724970885807288930596737309D+01,
     2     0.1578207720363543060673964671447144D+01,
     3     0.4028440651894159046150857264796666D+01,
     4     -.3772335433556429281916022120852396D-01,
     5     -.3812895001392069264336012079757465D+01,
     6     -.1990706487653009316677202245391680D+01,
     7     0.2247524918009860017857077091874008D+01,
     8     0.3334398776984887514232866617818458D+01,
     9     -.2984550799546999497953137899292087D+00,
     *     -.3235170654191375740584244625386958D+01,
     1     -.8954428744448199298367683292945914D+00,
     2     0.2045446787008936594155448519904803D+01,
     3     0.1017563956757924070838512604809119D+01,
     4     -.7747435185057463986780862032604661D+00,
     5     -.5878877886580009302100840655529338D+00,
     6     0.8350311928193332278566154505808620D-01,
     7     0.2000931902008118276339683143022385D+00,
     8     0.7768973009547759363576694117294107D-01,
     9     -.3596543209083909607350840828955443D-01,
     *     -.4379760336774388311878523961946912D-01,
     1     0.1676942055853453011731078887482137D-02,
     2     0.9575636543018252274558167043111068D-02,
     3     0.2725671055319544812136332905279947D-03,
     4     -.7661268226625409288883136057418234D-03/
        
c  rsmall=0.29990E+01, rlarge=0.15001E+02, iback=  1, m=  30 relerr=0.3800E-20
        data c2p1/
     1     0.9999999999999806180764802328656445D+00,
     2     0.1624825211330931567834293973125821D-12,
     3     0.1416666666682927540279164187429264D+01,
     4     -.2304927842842044369278915240668378D-10,
     5     -.1215277798880940638045842949032755D+00,
     6     0.1057862141121575488998645923112090D-08,
     7     0.1856675659308318211611019364374975D+00,
     8     0.2842427840112718001405097648187205D-08,
     9     -.3519989117469896325603656371646866D+00,
     *     -.2419097457654411333282867871093335D-05,
     1     0.7451402847718929551433099296530116D+00,
     2     0.1262750583372176838906699962234036D-03,
     3     -.1569868866540730079549126464081108D+01,
     4     -.3690690669977308909694951577570472D-02,
     5     0.2440266349643607860266608261498747D+01,
     6     0.7115088013238438731580321744899348D-01,
     7     0.4256477838404401450146717368183791D+01,
     8     -.9202802823474228156868035092420482D+00,
     9     -.8662878148508688461253575547040501D+02,
     *     0.6965967004161202580053728987997248D+01,
     1     0.7678043189715747751335988606782778D+03,
     2     0.1233602285579113063751982488441182D+01,
     3     -.5605429141385844850855904576341990D+04,
     4     -.8688624397784851424606034607687738D+03,
     5     0.3470976001154356325648792658757451D+05,
     6     0.1399743279172195471268589216491856D+05,
     7     -.1726873751462984829784549875530297D+06,
     8     -.1392290943149629451615702298880596D+06,
     9     0.6118784016495231590693898434168688D+06,
     *     0.1006330279091477050598640108134091D+07,
     1     -.9022928025390914365305782916058206D+06,
     2     -.5509007072052020754093847006668847D+07,
     3     -.5823969351002443931455422603940833D+07,
     4     0.2281006770114477123620626614804418D+08,
     5     0.5558530530347834775702523892449450D+08,
     6     -.6822652099578325573203509794043700D+08,
     7     -.2630192903249752730759564547293530D+09,
     8     0.1229364181123903728173764100743449D+09,
     9     0.8405290961648114221771825681286638D+09,
     *     0.2119682732449488453347181213603203D+08,
     1     -.1865779215460629518755843791394506D+10,
     2     -.1013126780360708645497598288818537D+10,
     3     0.2591538890411307608183905929582782D+10,
     4     0.3842715699216019607557893089636627D+10,
     5     -.9251792247096606216737681768283237D+09,
     6     -.8603430203345178263712874344531387D+10,
     7     -.5103692693517097890295196770809483D+10,
     8     0.1262652431434486892611296919094370D+11,
     9     0.1365717081917227306748116354818404D+11,
     *     -.1130164215240425909517424642472950D+11,
     1     -.1823481540945100810084762052340047D+11,
     2     0.3554672351447433144169485101693703D+10,
     3     0.1435512165722059658937876398907997D+11,
     4     0.4583942351795406589288179559298815D+10,
     5     -.6103205283754175732784573729890705D+10,
     6     -.6450934432240183956466452204163666D+10,
     7     0.8427517549962836922758210984945408D+09,
     8     0.3277384499519878734229884424081921D+10,
     9     0.1585707956680199188224407963961401D+09,
     *     -.6057035254541685809811878905550147D+09/


c  rsmall=0.14999E+02, rlarge=0.12000E+03, iback=  1, m=  20 relerr=0.2405E-20
        data c2p2/
     1     0.1000000000000000026801055960624533D+01,
     2     0.1627438680195529500437826868879687D-16,
     3     0.1416666666666660763215943202382684D+01,
     4     -.1028788346269487676146439207314238D-13,
     5     -.1215277777777359633356521560364158D+00,
     6     0.2127806434042078131536883382997985D-11,
     7     0.1856674383822255854775024833414191D+00,
     8     -.2134673958885520591523990576950674D-09,
     9     -.3519945342121297464763681596036314D+00,
     *     0.1081002094985467035079313767748360D-07,
     1     0.7450562017858160407736117095795976D+00,
     2     -.1275833541583867253591901860957746D-06,
     3     -.1569440022228372403652807842447096D+01,
     4     -.1919475091386271258523972090126935D-04,
     5     0.2465505899932235615854277466314228D+01,
     6     0.1469307309400532556425179231985186D-02,
     7     0.3360708914251589273094443590187005D+01,
     8     -.5708831752450606103502459664891171D-01,
     9     -.6985333245783130009883549336942154D+02,
     *     0.1437801438175807568984000260204312D+01,
     1     0.5561081849911425162324858655132921D+03,
     2     -.2464341053573337670669420260376182D+02,
     3     -.3738245997198691863595737757648385D+04,
     4     0.2799327345133528287079262114038996D+03,
     5     0.2386857284137364357714441093848332D+05,
     6     -.1773052925835388756755467135725782D+04,
     7     -.1441527503170283720889381766461488D+06,
     8     -.9569737933425339897629973031373801D+03,
     9     0.7585359181187375698111215917819156D+06,
     *     0.1427156716738303541218609128522708D+06,
     1     -.3097286166876914553754704448861638D+07,
     2     -.1500309905122792998351924594289857D+07,
     3     0.8537665823779441687342683042933724D+07,
     4     0.8457252984416451881445235203384737D+07,
     5     -.1228866856576183393417257197263378D+08,
     6     -.2794531014220510766370734648623002D+08,
     7     0.2686996325951937501242703370812053D+06,
     8     0.4997378378877568844663024314900387D+08,
     9     0.1637685357917470208373944604160492D+08,
     *      -.3594983032206447996188363967870648D+08/
        
cccc        m=2
cccc        call coefdump2(80+m,c2p0,32)
cccc        call coefdump2(80+m,c2p1,30)
cccc        call coefdump2(80+m,c2p2,20)

c     
c        if z is not in the right upper quadrant - bomb out
c
        ier=0
        com=z
        if( (rea(1) .ge. 0) .and. (rea(2) .ge. 0) ) goto 1400
        ier=4
        return
 1400 continue
c

        done=1
        thresh0=1**2
        thresh1=3**2
        thresh2=15**2
        thresh3=120**2
c
c       check if if the user-specified z is in one of the 
c       intermediate regimes 
c
        d=z*dconjg(z)
        if( (d .le. thresh0) .or. (d .gt. thresh3) ) goto 3000
c
c        the user-specified z is in one of the intermediate regimes.
c        act accordingly
c
c
        if(d .gt. thresh1) goto 1900
c
c       z is in the first intermediate regime: its absolute value is 
c       between 1 and 3. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=32
        call abram2p(c2p0,m,cd,j2)
        j2=dc*j2*(nu**12)/3
        if (ifexpon .eq. 1) j2=j2*exp(-nu)
        
        return
 1900 continue
c
        if(d .gt. thresh2) goto 2000
c
c       z is in the first intermediate regime: its absolute value is 
c       between 3 and 15. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abram2p(c2p1,m,cd,j2)
        j2=dc*(nu/3)*j2
        if (ifexpon .eq. 1) j2=j2*exp(-nu)

        return
 2000 continue
c
        if(d .gt. thresh3) goto 3000
c       z is in the second intermediate regime: its absolute value is
c       between 15 and 120. act accordingly.
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=20
        call abram2p(c2p2,m,cd,j2)
        j2=dc*(nu/3)*j2
        if (ifexpon .eq. 1) j2=j2*exp(-nu)

        return

        return
 3000 continue
c
c        z is either in the local regime or the asymptotic one.
c        if it is in the local regime - act accordingly.
c
        if(d .ge. 14400.d0) goto 4000
        call abram2series(z,j2,ifexpon)
        return
c
c        z is in the asymptotic regime. act accordingly.
c
 4000 continue
        call abram2asym(z,j2,ifexpon)
        return
        end
c
c
c
c
c
cccc        subroutine coefdump2(iw,coef,m)
cccc        implicit real *8 (a-h,o-z)
cccc        real *8 coef(1)
ccccc
cccc        write(iw,1200)
cccc 1200 format(10x)
ccccc
cccc      write(iw,1200)
cccc        write(iw,*) '\begin{table}[th]'
cccc        write(iw,*) '\caption{}'
cccc        write(iw,*) '\centering'
cccc        write(iw,*) '\begin{tabular}{SS}'
cccc        write(iw,*) '\toprule'
cccc        write(iw,*) '{real part} & {imaginary part}\\'
cccc        write(iw,*) '\midrule'
ccccc
cccc 1600 format(5x,D27.20,1x,'&',1x,D27.20,1x,'\\')
ccccc
cccc        do 2000 i=1,m
cccc              write(iw,1600) coef(2*i-1), coef(2*i)
cccc 2000   continue
cccc
cccc        write(iw,*) '\bottomrule'
cccc        write(iw,*) '\end{tabular}'
cccc        write(iw,*) '\label{tab2}'
cccc        write(iw,*) '\end{table}'
cccc        
cccc        return
cccc        end
