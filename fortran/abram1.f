c
c
c
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c        this is the end of the debugging code and the beginning of the
c        Abramowitz function code proper.
c
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
        subroutine abram1(z,j1,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,j1,j1u,com,zu,ima
        real *8 rea(2)
        equivalence (rea(1),com)
        data ima/(0.0d0,1.0d0)/,
     $     pi/3.141592653589793238462643383279502884197d0/
c
c        this subroutine evaluates the Abramowitz functions J_1
c        for a user-specified complex number z with Re(z)>=0.
c        
c        The code is reasonably accurate (almost 15-digit relative 
c        accuracy when ifexpon=0) 
c        and reasonably fast (O(1) cost for any z).
c
c        When ifexpon=1, that is, the Abramowitz function is evaluated
c        honestly. The subroutine will lose accuracy gradually
c        simply due to the ill-conditioning of evaluating the 
c        exponential factor exp(-nu) with nu=3(z/2)**(2/3).
c        The condition number of evaluating exp(-nu) is abs(nu). 
c        Thus, the subroutine will lose an extra log_{10}abs(nu) 
c        digits if the function is evaluated honestly.
c        
c        
c                      input parameters:
c
c  z - the complex number for which the Abramowitz function
c        J_1 is to be evaluated
c
c  ifexpon - the integer parameter telling the subroutine whether
c        to calculate the actual values of the Abramowitz function,
c        or the values of the Abramowitz function scaled by e^{nu}.
c        Permitted values: 0 and 1. 
c    ifexpon = 1 will cause the subroutine to evaluate the Abramowitz 
c        function honestly
c    ifexpon = 0 will cause the subroutine to scale the Abramowitz 
c        function by e^{nu}, where nu=3(z/2)^(2/3).
c        
c        
c                      output parameters:
c
c  j1 - the said Abramowitz function
c        
c       
c        . . . if z in the upper half-plane - act accordingly
c
        com=z 
        if(rea(2) .lt. 0) goto 1400
        call abram1ur(z,ier,j1,ifexpon)
        return
 1400 continue
c
c       z is in the right lower quadrant. compute 
c       j1 at the points zu obtained from z by reflection
c       in the x axis.
c
        zu=dconjg(z)
c
        call abram1ur(zu,ier,j1u,ifexpon)
        j1=dconjg(j1u)

        return
        end
c
c
c
c
c
        subroutine abram1p(p,m,z,f)
        implicit real *8 (a-h,o-z)
        complex *16 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram1pr(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1),z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram1pc(p,m,z,f)
        implicit real *8 (a-h,o-z)
        real *8 p(1)
        complex *16 z,f
c
c       evaluate a polynomial at a point
c
        f=p(m)
        do 1200 i=m-1,1,-1
        f=f*z+p(i)
 1200 continue
        return
        end
c
c
c
c
c
        subroutine abram1asym(z,j1,ifexpon)
c
c        evaluate the asymptotic expansion for J_1 at
c        the user-supplied point z.
c
        implicit real *8 (a-h,o-z)
        dimension c(51)
        complex *16 z,j1,nu,pp,cd
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
         data c/
     1     +1.0000000000000000000000000000000000000000000000000D0,
     2     +4.1666666666666666666666666666666666666666666666667D-1,
     3     -1.2152777777777777777777777777777777777777777777778D-1,
     4     +6.4139660493827160493827160493827160493827160493827D-2,
     5     +1.9340358153292181069958847736625514403292181069959D-2,
     6     -3.1092849124442729766803840877914951989026063100137D-1,
     7     +1.4108298810003298372961438805060204237158969669258D0,
     8     -5.3827622941806961630912462531118223847990651831530D0,
     9     +1.8161730583219714414179259492116716625175701536012D1,
     *     -4.5968409978561843180663715810919431006138655717819D1,
     1     -1.7270545637282574541539218028437527506450491316168D1,
     2     +1.5336912918879044875645393979400782114013980298290D3,
     3     -1.6190694089834720374200453438533315379038914388702D4,
     4     +1.2687686099818026157207128529588081834801628826122D5,
     5     -8.0997125989332100952887618389405908052786348486163D5,
     6     +3.6692432044524805606008342057402872691755552044046D6,
     7     +1.4384983107987170865939159179206964186206992839197D6,
     8     -3.1508125311373187886944666410649909254752880140110D8,
     9     +5.2192299842860676636239173647916505227088106453736D9,
     *     -6.1817769280508239681161560778902708397488432553194D10,
     1     +5.8032347312981415374577000998690618853710036680704D11,
     2     -3.7892351932652463391086949853150336431595969167889D12,
     3     -1.5123025253905347120351977060888493525523738506803D12,
     4     +6.1527527610446096883366507134161806264508407189285D14,
     5     -1.3886178332821098784826706219359021625603371120420D16,
     6     +2.2007230298938031864489959706263945901908341510521D17,
     7     -2.7266084811723899263202218887586266388439271930160D18,
     8     +2.3255711520137258834079732454567070305431630066602D19,
     9     +9.3727283501642472569850049440958922525964632105633D18,
     *     -6.1133852852281248233116724653523686848000251647100D21,
     1     +1.7467015512923958915108040588865599274769969362688D23,
     2     -3.4673402787339831445293963790202874212018370199292D24,
     3     +5.3365157771135460626377847551795657101745782873191D25,
     4     -5.6187833957835259641463540127476343033674944151590D26,
     5     -2.2785459569143472345576162596960244607897932740114D26,
     6     +2.1765941575412984900178913815414096374265901134979D29,
     7     -7.5252703244449870706649728455051719264774557416455D30,
     8     +1.7949627333178391336288802851398801952235561144434D32,
     9     -3.3012269437034906294403340673892439762448219918145D33,
     *     +4.1360306659267612014949229673903739588484075570275D34,
     1     +1.6843863559908663584117324102266963902760366902022D34,
     2     -2.2164129694951982299835628913717183949566827840614D37,
     3     +8.9930830768257291392389483460965808342700917846354D38,
     4     -2.5049044535318971544142401064687852502565727841999D40,
     5     +5.3585430255038862145603879281648325885966067013105D41,
     6     -7.7852354443222646802866236018512890620148507504024D42,
     7     -3.1803442524280829603589621712693990568285023643522D42,
     8     +5.5149052675957277411571412007598914840860113921683D45,
     9     -2.5686200458047391739621385174294378208758452500768D47,
     *     +8.1822342396534148639247216473386176595552928241198D48,
     1     -1.9958636618513235881941711559552488705873255035002D50/
c
        m=18
        nu=3*((z/2)**toth)

        pp=c(m+1)
        cd=1/nu
c
        do 1800 i=m,1,-1
        pp=pp*cd+c(i)
 1800 continue
c 
        j1=dc*sqrt(nu/3)*pp
        if (ifexpon .eq. 1) j1=j1*exp(-nu)            
c
        return
        end
c
c
c
c
c
        subroutine abram1series(z,j1,ifexpon)
        implicit real *8 (a-h,o-z)
        dimension a(25),b(50)
        complex *16 z,j1,lnz,z2,c1,c2,nu
c
c
c        this subroutine evaluates the Abramowitz functions J_1
c        for a user-specified complex number z in the local regime,
c        i. e. for cdabs(z) < 1, using the series expansion 
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_1 is to be evaluated
c
c                      output parameters:
c
c  j1 - the said Abramowitz functions
c        
        data a/
     2     -1.0000000000000000000000000000000000000000000000000D0,
     4     +8.3333333333333333333333333333333333333333333333333D-2,
     6     -1.3888888888888888888888888888888888888888888888889D-3,
     8     +8.2671957671957671957671957671957671957671957671958D-6,
     *     -2.2964432686654908877131099353321575543797766019988D-8,
     2     +3.4794594979780164965350150535335720520905706090891D-11,
     4     -3.1863182215915901982921383274116960183979584332318D-14,
     6     +1.8966179890426132132691299567926762014273562102570D-17,
     8     -7.7476225042590409038771648561792328489679583752329D-21,
     *     +2.2653866971517663461629137006372025874175316886646D-24,
     2     -4.9034344094194076756773023823316073320725794126939D-28,
     4     +8.0754848639977069757531330407305786101327065426448D-32,
     6     -1.0353185723073983302247606462475100782221418644416D-35,
     8     +1.0534377007604785614822554398122813168723462194156D-39,
     *     -8.6489137993471146262910955649612587592146651840361D-44,
     2     +5.8124420694537060660558437936567599188270599355081D-48,
     4     -3.2377685324497025769027650365735070849081216218294D-52,
     6     +1.5115632737860422861357446482602740825901594873153D-56,
     8     -5.9726698031691255181592565523165563560540520282729D-61,
     *     +2.0150707837952515243452282565170568002881417099436D-65,
     2     -5.8509604639815665631394548679357049950294474737039D-70,
     4     +1.4726065800819406430935907751776162778187474765187D-74,
     6     -3.2336552043960049255458734632797898063652777262157D-79,
     8     +6.2319904494218411300221119782604644741853178504004D-84,
     *     -1.0598623213302450901398149622891946384668907908844D-88/

        data b/
     1     -1.7724538509055160272981674833411451827975494561224D0,
     2     +6.3417650264770070909023186487639635343676099609011D-1,
     3     +5.9081795030183867576605582778038172759918315204080D-1,
     4     -1.4312581966508617020196376651747747389750786078529D-1,
     5     -1.9693931676727955858868527592679390919972771734693D-2,
     6     +3.2419118092329176515142109234394393797732791612363D-3,
     7     +1.8756125406407577008446216754932753257116925461613D-4,
     8     -2.2889387501417908671459620324075776101573121739533D-5,
     9     -7.4429069073045940509707209344971243083797323260367D-7,
     *     +7.1300232934730979571090231516188018728812920633199D-8,
     1     +1.5036175570312311214082264514135604663393398638458D-9,
     2     -1.1757281003950180216639183145921785476226795975099D-10,
     3     -1.7524680151879150599163478454703501938686944800068D-12,
     4     +1.1504962924920194630775727236956908945862160676471D-13,
     5     +1.2838593517860183589130753446669232189514245274775D-15,
     6     -7.2286447543021162402663238288071671581804641186473D-17,
     7     -6.2934281950295017593778203169947216615265908209681D-19,
     8     +3.0899169970328973494298223313234182763646963710355D-20,
     9     +2.1649219797143108907388442782919579159018200278528D-22,
     *     -9.3932000507275085051381168494967571238128211561177D-24,
     1     -5.4258696233441375707740458102555336238140852828391D-26,
     2     +2.1033153820757860070347157006426139325677096656487D-27,
     3     +1.0212440473073852005974112196980112222499689973347D-29,
     4     -3.5694235458618047156660705626739252650626845002171D-31,
     5     -1.4800638366773698559382771299971177134057521700502D-33,
     6     +4.7005549949833435118052956861888678966565374268145D-35,
     7     +1.6866824349599656477929084102531255993227944957837D-37,
     8     -4.8999753110261129615133355776967340706050924588895D-39,
     9     -1.5386630495894596312651965063429352301795242617987D-41,
     *     +4.1125107668603284704030100925869421539891538479969D-43,
     1     +1.1410182051089800750946952216113720653908225893947D-45,
     2     -2.8200726190061534776981685494983441293141477027336D-47,
     3     -6.9710300898642477706176394282219700964737450476214D-50,
     4     +1.6003483618209988417886534662130066287938376386018D-51,
     5     +3.5503081690166782636198825710323249791055487892138D-54,
     6     -7.6009140016827658197244028730230992702661945302700D-56,
     7     -1.5230837275918825669754965984694658855021659327387D-58,
     8     +3.0518148066784526499969228742066374949644318865222D-60,
     9     +5.5552530458908070429860911057718418700155594439168D-63,
     *     -1.0451344707344204916556132020033034954719987850628D-64,
     1     -1.7371022657569753105022173564014514915620886316188D-67,
     2     +3.0774818294544657983777229028030470608724390886875D-69,
     3     +4.6919543682493998609032692013112159780733290970985D-72,
     4     -7.8483771517168479120374211592638738554725484652455D-74,
     5     -1.1021739178410617479218391358494752121384376549444D-76,
     6     +1.7449677778380225256096287519419589529845985836168D-78,
     7     +2.2657496512304692114746410439911094914964285228583D-81,
     8     -3.4027412160749250024541165759442180692791677105595D-83,
     9     -4.0992720567927145959520933637123850982349625902054D-86,
     *     +5.8518824120170529390306995114562108302897286529580D-88/

c
c        evaluate j1
c
        m=18
        c1=b(m)
        do k=m-1,1,-1
           c1=c1*z+b(k)
        enddo

        m2=9
        c2=a(m2)
        z2=z**2
        do k=m2-1,1,-1
           c2=c2*z2+a(k)
        enddo

        j1=(c1*z+1+c2*z2*log(z))/2
        if (ifexpon .eq. 1) return

        nu=3*(z/2)**(2.0d0/3)
        j1=j1*exp(nu)        
        
c
        return
        end
c
c
c
c
c
        subroutine abram1ur(z,ier,j1,ifexpon)
        implicit real *8 (a-h,o-z)
        complex *16 z,com,ima,cd,j1,nu
        dimension rea(2)
        equivalence (rea(1),com)
        real *8 c1p0(60)
        real *8 c1p1(60)
        real *8 c1p2(40)
        data ima/(0.0d0,1.0d0)/,
     $     dc/1.0233267079464884884795516248892648607073764377510d0/,
     1     toth/0.66666666666666666666666666666666666666666666666667d0/
c
c        this subroutine evaluates the Abramowitz functions J_1
c        for a user-specified complex number z in the upper right quadrant.
c        it is reasonably accurate and reasonably fast.
c
c                      input parameters:
c
c  z - the complex number for which the Abramowitz functions
c        J_1 is to be evaluated
c
c                      output parameters:
c
c  ier - error return code. 
c         ier=0 means successful conclusion
c         ier=4 means that z is not in the upper right quadrant
c  J1 - the said Abramowitz function
c        

c  rsmall=0.99902E+00, rlarge=0.30010E+01, iback= 12, m=  30 relerr=0.6958E-20
        data c1p0/
     1     0.1100519834284648575461969626567614D-15,
     2     -.6949747989769490179841580699874545D-16,
     3     -.1025371739095283674950022007266073D-13,
     4     0.5734473306129840075376749139551748D-15,
     5     0.3554198074614725021257401160846639D-12,
     6     0.1713803594773943698706927554370860D-12,
     7     -.5706566342677331692503885910874700D-11,
     8     -.8009775268038486135318522330174101D-11,
     9     0.2137794240232203280061421434170069D-10,
     *     0.1774576114348886663362438499137727D-09,
     1     0.9250417777356368165926045574241925D-09,
     2     -.2349169028244691206607642192573382D-08,
     3     -.2195813220677378486942195539506515D-07,
     4     0.1871525554116207923569254708916830D-07,
     5     0.2674414681343508801951630833641548D-06,
     6     -.6053819272756156657143091857793793D-07,
     7     -.2141796433888402639303837719862649D-05,
     8     -.5516677747106014846694208116140849D-06,
     9     0.1160522980340369805910381659866317D-04,
     *     0.1008920682715777662678425906461615D-04,
     1     -.3690228624595592633135599849312789D-04,
     2     -.8573452363046485884444695586116823D-04,
     3     0.9999888602652053704664426523278141D+00,
     4     0.4998476039579650005859924165466485D-03,
     5     0.4176483433674887286704335846012767D+00,
     6     -.2175915283528788624992181904385616D-02,
     7     -.1288043587625480127878992024687587D+00,
     8     0.7238462346630405340567336201945704D-02,
     9     0.1000179707539349410371660729847946D+00,
     *     -.1820468137840920733606212510671152D-01,
     1     -.1232699453341651959940711636613498D+00,
     2     0.3249432476889198153188786564101442D-01,
     3     0.1939081572401391017740223659973842D+00,
     4     -.3104805600805755641184544833811660D-01,
     5     -.3044622094847660307550452895153960D+00,
     6     -.2809437137508669472889870794971110D-01,
     7     0.4021717830439483091862584626394291D+00,
     8     0.1870143282906893648748965623942003D+00,
     9     -.3904541137801301464146419596980333D+00,
     *     -.4296519573924736599233062528606140D+00,
     1     0.2029948606705156449249630577900182D+00,
     2     0.6427095941349586038569657900655345D+00,
     3     0.1008698542379387651727670062855841D+00,
     4     -.6771270705474808668280742402044039D+00,
     5     -.3470631162709717304019526784774320D+00,
     6     0.4894308563091166783243453192223745D+00,
     7     0.3971712777283085428121669432195002D+00,
     8     -.2038865198779863753649308729729353D+00,
     9     -.2762797019065861449450353060777499D+00,
     *     -.3692063937826487688057717118011757D-02,
     1     0.1209391137086875583207474903666952D+00,
     2     0.6716839841397152480413142104837103D-01,
     3     -.2884572498888442128441792435756886D-01,
     4     -.4544230995419894053917446961879376D-01,
     5     0.9725379367143446932838670957924462D-03,
     6     0.1523674527687355739868236279198203D-01,
     7     0.1198991148417017666975365706115418D-02,
     8     -.2540092625008629601965415173155662D-02,
     9     -.2043656534866307136486537817022428D-03,
     *     0.1467205787987667125049572029234289D-03/


c  rsmall=0.29990E+01, rlarge=0.15001E+02, iback=  1, m=  30 relerr=0.3969E-20
        data c1p1/
     1     0.1000000000000155982193137636414839D+01,
     2     -.6443258097561377108177990528877750D-13,
     3     0.4166666666376504579204423699288274D+00,
     4     -.3092929038031658530782766799117468D-11,
     5     -.1215277757560203188104282047517364D+00,
     6     0.1384788749545077951200807673215260D-08,
     7     0.6413959901073068460063048854761634D-01,
     8     -.1180414389050596387755426099817022D-06,
     9     0.1934033387686825091370250926264269D-01,
     *     0.5252512910365922288162728502468267D-05,
     1     -.3108539628811745832465458489703959D+00,
     2     -.1420994261518035295771202460181693D-03,
     3     0.1407611239349774059483176105050435D+01,
     4     0.2284327081823979702100030700950644D-02,
     5     -.5303460358285859113698028508532673D+01,
     6     -.1250842690210426705302983745235685D-01,
     7     0.1684396983704258109685906572159721D+02,
     8     -.3963385915117312274496462472471646D+00,
     9     -.3089610396200874353661455474516048D+02,
     *     0.1336686724292198946952098882707793D+02,
     1     -.1235407865889633807213524529396990D+03,
     2     -.2310029655783931016136234740559475D+03,
     3     0.1648602872918980277231040854666359D+04,
     4     0.2779801131678972591476356874721015D+04,
     5     -.7936560028196257261670474783443400D+04,
     6     -.2508537943834564169038319124347808D+05,
     7     -.1787633816203296979222604209152001D+04,
     8     0.1733771130220110275570408814141174D+06,
     9     0.3604219537443209804932102180140062D+06,
     *     -.9093230389846235051460886741295023D+06,
     1     -.3381832930870064950239780058740102D+07,
     2     0.3428395544387270274495263980279010D+07,
     3     0.1944920289774949483409708054472527D+08,
     4     -.7462549959835274394231270271361089D+07,
     5     -.7904708337225139889326407285489883D+08,
     6     -.6170403644563674364218463259433231D+07,
     7     0.2278788941955042021721647106986588D+09,
     8     0.1354245496953103669706482347620801D+09,
     9     -.4155063859500060417700933638291125D+09,
     *     -.6548337328030066267055938776821412D+09,
     1     0.1729071236961768811200806744043789D+09,
     2     0.1966489523337921013846709471386625D+10,
     3     0.1676377797139952087071153533971008D+10,
     4     -.4000507522761519329398067805365552D+10,
     5     -.6309711701893963468880476413603146D+10,
     6     0.5144267123043069539264876032382916D+10,
     7     0.1263962370861491854043739918052937D+11,
     8     -.2425053391923320008744036271432799D+10,
     9     -.1602142483818593786585796234925789D+11,
     *     -.5106322326010524585240355510300058D+10,
     1     0.1219447003917797307381508373787874D+11,
     2     0.1280129565811504846681843318203511D+11,
     3     -.3661756974092809905259549402398858D+10,
     4     -.1390699532495165833512240479159539D+11,
     5     -.2088243084926564070401832036176028D+10,
     6     0.8235141391037191631761972171627922D+10,
     7     0.2225632475968998520642014392157436D+10,
     8     -.2360699925981790648466395459705894D+10,
     9     -.5735727546646645258738712284236920D+09,
     *     0.1810016796326826499473110479772331D+09/


c  rsmall=0.14999E+02, rlarge=0.12000E+03, iback=  1, m=  20 relerr=0.2920E-20
        data c1p2/
     1     0.1000000000000000008753608364265795D+01,
     2     -.3710468209443674107347800921800341D-16,
     3     0.4166666666666569326801110993470395D+00,
     4     0.1063310578656067994349135319534520D-13,
     5     -.1215277777753253013490705496966872D+00,
     6     -.8178348330975192096359456013353922D-12,
     7     0.6413966020684439505478595843229862D-01,
     8     -.5320674630959921565248420078334990D-10,
     9     0.1934037614650634953380736416665010D-01,
     *     0.1471430908525910826576648510028133D-07,
     1     -.3109290147360076043337184687111924D+00,
     2     -.1284763375784474115911494078843374D-05,
     3     0.1410823020442152614796539982645276D+01,
     4     0.6402980430926713546933488853108040D-04,
     5     -.5381428703519293517424822926055912D+01,
     6     -.1972916393745892006942975237711292D-02,
     7     0.1809904050654592851036585681200308D+02,
     8     0.3395926604671055152800331938701499D-01,
     9     -.4422252110177100525877730102981120D+02,
     *     -.4644312914936401736360304007583041D-01,
     1     -.4928171250560989222078734463522220D+02,
     2     -.1467333869827453979038924045046117D+02,
     3     0.1912073103979929786550431057529503D+04,
     4     0.4465465576649152772356498477026081D+03,
     5     -.1848029640713955611333726583605644D+05,
     6     -.7652925717618241891418539088100791D+04,
     7     0.1194945128330175113322474023549030D+06,
     8     0.8803754811550499652711694926562935D+05,
     9     -.5141136405700266382410420179935174D+06,
     *     -.7056340028120683077019678597775967D+06,
     1     0.1097353539281982871204086840813696D+07,
     2     0.3909945266915657670286319848435287D+07,
     3     0.1733143556519913503115633546439225D+07,
     4     -.1435500766113357373471866110596335D+08,
     5     -.1912719574803264617715196734847355D+08,
     6     0.3175725324522794637115318823681136D+08,
     7     0.5080157444332996365652860402829091D+08,
     8     -.3370065794630133133308923001048623D+08,
     9     -.4791028805923425399397910512116925D+08,
     *     0.6117190703760901195759419636849046D+07/

cccc        m=1
cccc        call coefdump1(80+m,c1p0,30)
cccc        call coefdump1(80+m,c1p1,30)
cccc        call coefdump1(80+m,c1p2,20)

c     
c        if z is not in the right upper quadrant - bomb out
c
        ier=0
        com=z
        if( (rea(1) .ge. 0) .and. (rea(2) .ge. 0) ) goto 1400
        ier=4
        return
 1400 continue
c

        done=1
        thresh0=1**2
        thresh1=3**2
        thresh2=15**2
        thresh3=120**2
c
c       check if if the user-specified z is in one of the 
c       intermediate regimes 
c
        d=z*dconjg(z)
        if( (d .le. thresh0) .or. (d .gt. thresh3) ) goto 3000
c
c        the user-specified z is in one of the intermediate regimes.
c        act accordingly
c
c
        if(d .gt. thresh1) goto 1900
c
c       z is in the first intermediate regime: its absolute value is 
c       between 1 and 3. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abram1p(c1p0,m,cd,j1)
        j1=dc*sqrt(nu/3)*j1*(nu**11)
        if (ifexpon .eq. 1) j1=j1*exp(-nu)
        return
 1900 continue
c
        if(d .gt. thresh2) goto 2000
c
c       z is in the first intermediate regime: its absolute value is 
c       between 3 and 15. act accordingly
c
c       . . . evaluate the expansion
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=30
        call abram1p(c1p1,m,cd,j1)
        j1=dc*sqrt(nu/3)*j1
        if (ifexpon .eq. 1) j1=j1*exp(-nu)

        return
 2000 continue
c
        if(d .gt. thresh3) goto 3000
c       z is in the second intermediate regime: its absolute value is
c       between 15 and 120. act accordingly.
c
        nu=3*(z/2)**toth
c 
        cd=done/nu
c
        m=20
        call abram1p(c1p2,m,cd,j1)
        j1=dc*sqrt(nu/3)*j1
        if (ifexpon .eq. 1) j1=j1*exp(-nu)

        return

        return
 3000 continue
c
c        z is either in the local regime or the asymptotic one.
c        if it is in the local regime - act accordingly.
c
        if(d .ge. 14400.d0) goto 4000
        call abram1series(z,j1,ifexpon)
        return
c
c        z is in the asymptotic regime. act accordingly.
c
 4000 continue
        call abram1asym(z,j1,ifexpon)
        return
        end
c
c
c
c
c
cccc        subroutine coefdump1(iw,coef,m)
cccc        implicit real *8 (a-h,o-z)
cccc        real *8 coef(1)
ccccc
cccc        write(iw,1200)
cccc 1200 format(10x)
ccccc
cccc      write(iw,1200)
cccc        write(iw,*) '\begin{table}[th]'
cccc        write(iw,*) '\caption{}'
cccc        write(iw,*) '\centering'
cccc        write(iw,*) '\begin{tabular}{SS}'
cccc        write(iw,*) '\toprule'
cccc        write(iw,*) '{real part} & {imaginary part}\\'
cccc        write(iw,*) '\midrule'
ccccc
cccc 1600 format(5x,D27.20,1x,'&',1x,D27.20,1x,'\\')
ccccc
cccc        do 2000 i=1,m
cccc              write(iw,1600) coef(2*i-1), coef(2*i)
cccc 2000   continue
cccc
cccc        write(iw,*) '\bottomrule'
cccc        write(iw,*) '\end{tabular}'
cccc        write(iw,*) '\label{tab1}'
cccc        write(iw,*) '\end{table}'
cccc        
cccc        return
cccc        end
